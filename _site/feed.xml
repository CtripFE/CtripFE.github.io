<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELSE</title>
    <description>A simple yet classy theme for your Jekyll website or blog.
</description>
    <link>http://ctripfe.com//</link>
    <atom:link href="http://ctripfe.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 23 Jun 2017 16:56:41 +0800</pubDate>
    <lastBuildDate>Fri, 23 Jun 2017 16:56:41 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>[译]2017年，一个Node开发者的好习惯</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.heroku.com/node-habits-2017&quot;&gt;Habits of a Happy Node Hacker 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从我们之前发布的 &lt;a href=&quot;https://blog.heroku.com/node-habits-2016&quot;&gt;Happy Node Hackers&lt;/a&gt; 算起,已经差不多一年了。尽管时间很短，但却已发生了很多变化，一些强大的新工具已经发布了。 Node.js生态系统持续迭代，已出现了更新的最佳实践。&lt;/p&gt;

&lt;p&gt;以下是2017年Node开发者的8个新习惯。它们专门针对应用开发者，而不是模块作者，因为他们有不同的目标和约束:&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1.锁定你的依赖树&lt;/h2&gt;

&lt;p&gt;在如今的许多Node应用程序中，你的代码通常只是冰山一角。即便是一个非常小的应用，也可能有数千行的Javascript代码隐藏在node_modules里。如果在package.json中，你的应用指定了确切的依赖项，而这些库可能并不存在。因为随着时间推移，你每次&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;都可能获得不同的代码，从而导致一些不可预期的潜在bug。&lt;/p&gt;

&lt;p&gt;在过去的一年中，Facebook 发布了一种新的包管理器&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt;。它可以让你使用庞大的npm库中的将近50万个模块，并生成一个锁文件(lockfile)来保存你的依赖树中每个模块的精确版本。这意味我们在每次发布应用时都将下载完全相同的代码。&lt;/p&gt;

&lt;p&gt;不过，npm也发布一个带锁文件(lockfile)的新版本。确实，npm现在更快了。这意味着无论你选择哪种包管理器，你都将感受安装时的巨大改进，并且在生产中也会出现更少的错误。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Yarn&lt;/code&gt;时，安装它并运行在你的应用目录下。它将安装你的依赖项并生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt;文件，在编译你的应用时，它会告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;Heroku&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Yarn&lt;/code&gt;进行编译。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm 5&lt;/code&gt;时，在本地运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g npm@latest&lt;/code&gt;命令进行升级，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf node_modules &amp;amp;&amp;amp; npm install&lt;/code&gt;命令重新安装你的应用依赖包。生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt;文件会告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;Heroku &lt;/code&gt;去使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm 5&lt;/code&gt;来安装你的模块。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2.钩起来&lt;/h2&gt;

&lt;p&gt;自动化构建中&lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;scripts&lt;/a&gt;提供很多好用的钩子。如果你想在编译你的应用之前运行一些东西，你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;preinstall&lt;/code&gt;脚本。需要使用grunt, gulp, browserify, 或者 webpack 来构建assets吗? 在&lt;code class=&quot;highlighter-rouge&quot;&gt;postinstall&lt;/code&gt;中完成它吧。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grunt build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node app.js&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;你也可以使用环境变量去控制这些脚本：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;if $BUILD_ASSETS; then npm run build-assets; fi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build-assets&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;grunt build&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果你的脚本需要一些外部的支持，可以移到sh之类文件里：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scripts/postinstall.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;javascript&quot;&gt;3.现代化你的Javascript&lt;/h2&gt;

&lt;p&gt;随着Node 8的发布，在ES2015中维护一个复杂的构建系统来编写我们的应用程序的日子已经过去了。Node现在已经有99%的特性与ES2015规范一起完成了，这意味着你可以使用这些新的特性，例如 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;模板字符串&lt;/a&gt; 或者&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;解构赋值&lt;/a&gt;, 而不需要任何的转换或者构建过程。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combinations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;8.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;linux-x64&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;8.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;darwin-x64&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;linux-x64&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;7.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;darwin-x64&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combinations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有许多这样的&lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;语法糖&lt;/a&gt;，总之，这些显著提高了JavaScript的可读性，并使代码更具表达性。&lt;/p&gt;

&lt;h2 id=&quot;promises&quot;&gt;4.保持你的Promises&lt;/h2&gt;

&lt;p&gt;除了ES2015，Node 8还支持期待已久的&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;和``await&lt;code class=&quot;highlighter-rouge&quot;&gt;关键字，而不再是实验特性。这个特性建立在&lt;/code&gt;Promises`的基础之上，允许你编写看起来像同步代码的异步代码，并且具有相同的错误处理语义，使编写更容易、更容易理解和更安全。&lt;/p&gt;

&lt;p&gt;你可能需要重新以下编写嵌套的回调代码:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPhotos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;getAlbums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;albums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;getPhotosForAlbums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;albums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;改变成自上而下而不是由内到外的代码:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPhotos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;albums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAlbums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPhotosForAlbums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;albums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可以在任何回调中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;。如果你有仍然期望回调的函数，Node 8实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;util.promisify&lt;/code&gt;，它可以自动将一个用回调风格编写的函数转换为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;可以使用的函数。&lt;/p&gt;

&lt;h2 id=&quot;prettier&quot;&gt;5.使用Prettier自动格式化你的代码&lt;/h2&gt;

&lt;p&gt;我们都花了太多的时间来格式化代码，在这里添加一个空格，在那里调整注释，我们都做的和我们的同事的两张桌子有一点不同。这就引出了无休止的争论，关于分号的位置，或者我们是否应该使用分号。&lt;a href=&quot;http://jlongster.com/A-Prettier-Formatter&quot;&gt;Prettier&lt;/a&gt;是一个开源工具，它承诺最终消除那些无意义的争论。你可以以任何你喜欢的样式编写代码，并且使用一个命令，它的格式都是一致的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/2017-06-21/1497327351-prettier.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这听起来像是一件小事，但让你自己从空格中解脱出来，很快就会让人感到解脱。Prettier是几个月前才发布的，但它已经被Babel、React、Khan Academy、Bloomberg以及更多的人所接受。&lt;/p&gt;

&lt;p&gt;如果你讨厌写分号，让Prettier帮你添加，或者你的整个团队可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-semi&lt;/code&gt;选项永远把它们驱逐出去。Prettier支持ES2015和Flow语法，而最近的1.4.0版本也增加了对CSS和TypeScript的支持。&lt;/p&gt;

&lt;p&gt;它可以集成到大部分的文本编辑器，但是我们建议将其设置成&lt;code class=&quot;highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt;的钩子或放在package.json的生命周期脚本里:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;prettify&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prettier --write 'src/**/*.js'&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;6. 持续测试&lt;/h2&gt;

&lt;p&gt;推出一个新功能，却发现破坏了生产应用程序，这是非常不爽的。如果你很勤奋地为你编写的代码编写测试，那么你可以避免这种错误，但是编写一个好的测试套件需要花费大量的时间。此外，该功能需要在昨天发布，而这仅仅是第一个版本。为什么还要编写那些在下周就要重写的测试用例?&lt;/p&gt;

&lt;p&gt;在像Mocha或Jest这样的框架中编写单元测试是确保JavaScript代码健壮和设计良好的最好方法之一。然而，有许多代码可能无法判断应该投入多少时间去测试。测试库Jest有一个称为快照测试的特性，它可以帮助你获得对那些无法测试的代码的洞察力和可视性。而不是决定提前判断一个函数调用应有的输出并且编写一个测试用例,Jest会将首次运行的结果保存到一个本地文件中,然后用它与下一次运行的结果进行比较，如果有变化，它将会提醒你。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/2017-06-21/1497327924-jest-snapshot-testing.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然这并不会告诉你你的代码是否和你写的时候一样，但这确实能让你观察到你在快速移动和开发新功能时，你正在向你的应用中引入哪些变化。当输出更改时，你可以使用一个命令快速更新快照，它们将与你的代码一起被检入你的git历史记录。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test /endpoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//0.0.0.0:5000/endpoint`);&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toMatchSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/heroku-examples/jest-snapshot-testing&quot;&gt;测试demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一旦你测试了你的代码，建立一个好的CI工作流是确保它能被测试的一种方法。为了达到这个目的，我们推出了Heroku CI。它构建在Heroku持续交付工作流程中，你永远不会等待队列。&lt;a href=&quot;https://www.heroku.com/continuous-integration&quot;&gt;点击这里查看详情&lt;/a&gt;！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不需要花哨的功能，只想要一个超级简单的测试运行器吗? 检查磁带，以满足你的最低测试需求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;helmet&quot;&gt;7. 戴上你的 Helmet&lt;/h2&gt;

&lt;p&gt;针对web应用程序的安全性，可以通过一些简单而又重要的配置来锁定你的应用程序去返回正确的HTTP头部。&lt;/p&gt;

&lt;p&gt;在生产环境中，一个基于Exrpess的应用可以通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Helmet&lt;/code&gt;，可以使你的程序更完美。&lt;code class=&quot;highlighter-rouge&quot;&gt;Helmet&lt;/code&gt;是一个快捷的中间件模块，主要通过HTTP头来保护你的应用程序。(PS:原文有点啰嗦，这里概括了一下)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Helmet&lt;/code&gt;可以帮助你防止跨站脚本攻击，防止点击劫持，等等！只需要几行就可以将基本的安全性添加到现有的express应用程序中:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helmet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'helmet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helmet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://expressjs.com/en/advanced/best-practice-security.html&quot;&gt;阅读更多&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;https&quot;&gt;8. 请使用HTTPS&lt;/h2&gt;

&lt;p&gt;通过默认使用私有连接，并使之成为规范，这样每个人都会更安全。作为web工程师，我们没有理由不将应用程序中的所有流量都默认为使用HTTPS。&lt;/p&gt;

&lt;p&gt;在express应用程序中，你需要做一些事情来确保你的站点是通过https服务的。首先，确保在响应中设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;Strict-Transport-Security&lt;/code&gt;请求头部(通常缩写为HSTS)。这指示浏览器总是通过https发送请求。如果你在使用Helmet，那么这已经为你做了！&lt;/p&gt;

&lt;p&gt;然后，确保将任何http请求重定向到服务器，通过https连接到相同的url。&lt;code class=&quot;highlighter-rouge&quot;&gt;express-enforce-ssl &lt;/code&gt;中间件提供了一种简便的方法。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expressEnforcesSSL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express-enforces-ssl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'trust proxy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expressEnforcesSSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此外，你还需要证书机构颁发的TLS证书。但是如果你将应用程序部署到Heroku或者其它专业dyno环境，你将自动得到TLS证书，我们会通过自动化证书管理工具为你的域配置加密,如果你没有一个自己的域名,我们提供一个通用的子域*.herokuapp.com。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;你的习惯是什么？&lt;/h2&gt;

&lt;p&gt;我试着在我的所有项目中遵从这些习惯。不管你是 node 新人还是服务端 JS 老手，我确定你会为
自己开发一些技巧。我们非常欢迎听到它们！使用 #node_habits 标签，分享你的习惯！&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//translator/2017/06/22/Habits-of-a-Happy-Node-Hacker-2017.html</link>
        <guid isPermaLink="true">http://ctripfe.com//translator/2017/06/22/Habits-of-a-Happy-Node-Hacker-2017.html</guid>
        
        
        <category>translator</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2017.06.19期)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;eslint-v400-releasedhttpeslintorgblog201706eslint-v400-released&quot;&gt;&lt;a href=&quot;http://eslint.org/blog/2017/06/eslint-v4.0.0-released&quot;&gt;ESLint v4.0.0 released&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ESLint 主版本升级，4.0.0 中有几个突破性的变化，参考这份 迁移指南 来完成升级。&lt;/p&gt;

&lt;h4 id=&quot;v8-release-beta-versionhttpsv8projectblogspothk201706v8-release-60html&quot;&gt;&lt;a href=&quot;https://v8project.blogspot.hk/2017/06/v8-release-60.html&quot;&gt;v8 release beta version&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;V8 JavaScript Engine release 6.0，see more in newest branch V8 version 6.0。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;前端技术&lt;/h2&gt;

&lt;h4 id=&quot;how-to-use-webpacks-new-magic-comment-feature-with-react-universal-component--ssrhttpsmediumcomwebpackhow-to-use-webpacks-new-magic-comment-feature-with-react-universal-component-ssr-a38fd3e296a&quot;&gt;&lt;a href=&quot;https://medium.com/webpack/how-to-use-webpacks-new-magic-comment-feature-with-react-universal-component-ssr-a38fd3e296a&quot;&gt;How to use Webpack’s new “magic comment” feature with React Universal Component + SSR&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;如何开始使用在 webpack 2.4.0 提供的魔术注释特性。&lt;/p&gt;

&lt;h4 id=&quot;es6-modules-httpszhuanlanzhihucomp27276672&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27276672&quot;&gt;ES6 modules 即将到来，现在该考虑新的打包方案了嘛？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文展示了 ESM 的到来，浏览器对其的支持，及前端打包方案的新的考虑。&lt;/p&gt;

&lt;h4 id=&quot;what-is-webkithttpsdocsgooglecompresentationd1zriqbukw9tf077odch66orrwrivnlvinhlm2gif0embedstartfalseslideidp&quot;&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1ZRIQbUKw9Tf077odCh66OrrwRIVNLvI_nhLm2Gi__F0/embed?start=false&amp;amp;slide=id.p&quot;&gt;What is WebKit?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;WebKit is not a brower, a science project, or the solution to every problem. What is WebKit? This official doc may refresh our understanding of WebKit a little deeper.&lt;/p&gt;

&lt;h4 id=&quot;node-stream-httpwwwbarretleecomblog20170606dive-to-nodejs-at-stream-module&quot;&gt;&lt;a href=&quot;http://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/&quot;&gt;深入理解 Node Stream 内部机制&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;关于请求、响应、文件流的底层node stream， 文章详细的介绍了 Node Stream 内部机制。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实用技巧&lt;/h2&gt;

&lt;h4 id=&quot;solid-httpwwwjianshucomp2cd98d697adc&quot;&gt;&lt;a href=&quot;http://www.jianshu.com/p/2cd98d697adc&quot;&gt;代码审查关注什么：SOLID 原则&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这篇文章介绍在代码审查时很重要的一点，讨论代码本身的设计，遵循一种良好的面向对象设计实践：SOLID 原则。如果在代码审查中看到复杂的代码，可能会发现应用这些原则之一会找到一个更简单，更易于理解的解决方案。&lt;/p&gt;

&lt;h4 id=&quot;upgrading-from-node-6-to-node-8-a-real-world-performance-comparisonhttpshackernooncomupgrading-from-node-6-to-node-8-a-real-world-performance-comparison-3dfe1fbc92a3&quot;&gt;&lt;a href=&quot;https://hackernoon.com/upgrading-from-node-6-to-node-8-a-real-world-performance-comparison-3dfe1fbc92a3&quot;&gt;Upgrading from Node 6 to Node 8: a real-world performance comparison&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;node8很快，但是你不知道它在各个方面的表现具体数字有了多少的提升，文章从node不同使用场景对node6和8进行了性能数据的可视化对比，以及node_modules下载速度在两个npm版本和yarn的对比。&lt;/p&gt;

&lt;h4 id=&quot;httpslinuxcnarticle-8544-1html&quot;&gt;&lt;a href=&quot;https://linux.cn/article-8544-1.html&quot;&gt;见鬼了么？好玩的整蛊恶作剧脚本&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这是一个 bash shell 脚本，其中有若干可以整蛊（结仇）你的同事的小技巧。主要由一些别名、函数、环境变量定义组织而成，执行该脚本后，你的 shell 环境就变成了一个光怪陆离的世界。&lt;/p&gt;

&lt;h4 id=&quot;css-shapescsshttpwwwcnblogscomcoco1sp6992177html&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/coco1s/p/6992177.html&quot;&gt;奇妙的 CSS shapes(CSS图形)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;利用CSS shapes来做一些简单的几何图形样式。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;tabhttpsstackoverflowblog20170615developers-use-spaces-make-money-use-tabs&quot;&gt;&lt;a href=&quot;https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/&quot;&gt;用空格的程序员比用Tab的程序员工资高&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;作者用数据可视化做了调查和对比。 从此文可以感受到一种标准的西方程序员的极客精神 — 总能在生活中找到一些特殊的视角，然后用前端技术加以调侃。现在或将来，数据可视化的热潮并没有任何减退的理由；作为一个前端工程师，能从生活和社会中找到一些即使是小小的问题，用技术和业余空闲时间做出调查、展示和总结，在社区里分享出来，不仅能提高自己还能给别人带来思考和快乐，这才是我眼中的有机的、健康的开源精神。&lt;/p&gt;

&lt;h4 id=&quot;sofishhttpsmpweixinqqcomsbizmziwnjqwmzuwmqmid2247485261idx1snff78ab4af5ca3681ce0349367fed20b6chksm9723658fa054ec99c9ef17447b6e6b905215f455b54cb208c86cc0db2e0d7c9b9cbaa88af127rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;amp;mid=2247485261&amp;amp;idx=1&amp;amp;sn=ff78ab4af5ca3681ce0349367fed20b6&amp;amp;chksm=9723658fa054ec99c9ef17447b6e6b905215f455b54cb208c86cc0db2e0d7c9b9cbaa88af127#rd&quot;&gt;十问sofish：帮你理清前端工程师及大前端团队的成长问题&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文是前端之巅向 sofish 的约稿《什么样的人可以称为架构师？》、采访《饿了么大前端团队究竟是如何落地和管理的?》以及 sofish 做客大咖说直播节目的总结和整理，希望能帮助各位淀粉更清晰地理解 sofish 的观点。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;tcphttpjmtaobaoorg2017060820170608&quot;&gt;&lt;a href=&quot;http://jm.taobao.org/2017/06/08/20170608/&quot;&gt;就是要你懂 TCP&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;对TCP讲解的文章很多，本文更为言简意赅，以实际案例讲述TCP原理，包含三次握手，四次挥手及可靠传输的实现原理。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT小组&lt;/a&gt; 出品，汇聚一周好文章，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27448117?group_id=860084576742146048&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@CurtisCBS&lt;/a&gt; 中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工, 不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 从 C++ 走来，一路虐过 C#, Java, Python, Go, 现在写 Javascript&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 程序圈的间谍，我的梦想在浩瀚宇宙，我的征途是星辰大海&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/sturloly&quot;&gt;@sturloly&lt;/a&gt; building apps for my future starship&lt;/p&gt;

  &lt;p&gt;感谢以下同学荐稿：&lt;a href=&quot;https://github.com/elevenbeans&quot;&gt;@elevenbeans&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章，期待你们。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 19 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//weekly/2017/06/19/weekly.html</link>
        <guid isPermaLink="true">http://ctripfe.com//weekly/2017/06/19/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2017.06.12期)</title>
        <description>&lt;h2 id=&quot;else&quot;&gt;ELSE原创&lt;/h2&gt;

&lt;h4 id=&quot;by-elevenbeanshttpelevenbeansgithubio20170606e7a7bbe58aa8e7abafe6b58fe8a788e599a8e8b083e8af95e696b9e6b395e6b187e680bb&quot;&gt;&lt;a href=&quot;http://elevenbeans.github.io/2017/06/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/&quot;&gt;移动端浏览器调试方法汇总 (by elevenBeans)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;浏览器兼容性一直以来都是让 Web 前端开发人员头疼的问题。虽然移动端其内核趋于统一（webkit），兼容问题也不再像 PC 端那么严重。但在生产环境当中，考虑到第三方浏览器在内核上面的 “优化”，如（wechat、UC、QQ、360 等），兼容问题依旧是无法忽略。
本文汇总一下目前比较常见的 Web 移动端调试方法。&lt;/p&gt;

&lt;h4 id=&quot;conways-game-of-life-explanation-by-sturlolyhttpswwwsturlolycom20170612e590ace8af91conways-game-of-life-is-sample-game-by-john-conway&quot;&gt;&lt;a href=&quot;https://www.sturloly.com/2017/06/12/%E5%90%AC%E8%AF%91conways-game-of-life-is-sample-game-by-john-conway/&quot;&gt;[中英]康威的游戏人生图文解说 – CONWAY’S GAME OF LIFE EXPLANATION (by sturloly)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Unlike the popular board game of life，Conway’s Game of Life is a simple simulation of living cells.
  – 本文相关于『作品展示』分类中的 《Chrome extension：Game of Life》一文&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;技术前沿&lt;/h2&gt;
&lt;h4 id=&quot;reactxphttpsmicrosoftgithubioreactxp&quot;&gt;&lt;a href=&quot;https://microsoft.github.io/reactxp/&quot;&gt;ReactXP&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;微软出品，以微软一惯的傻白甜风格，只要学习过React，相信使用ReactXP也是无障碍的。多说一点，别看市场上都不看好Windows移动战略，你们不支持我，我自己就撸一发，支持我自己，哼！XP means X-Platform  Share most of your code between the &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;iOS&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Android&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;Windows&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;es7-decorator-httptaobaofedorgblog20151116es7-decorator&quot;&gt;&lt;a href=&quot;http://taobaofed.org/blog/2015/11/16/es7-decorator/&quot;&gt;ES7 Decorator 装饰者模式&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文分享了装饰者模式以及如何使用 ES7 的 decorator 概念。&lt;/p&gt;

&lt;h4 id=&quot;introducing-nilejshttpshackernooncomintroducing-nile-js-81d83a31cfe3&quot;&gt;&lt;a href=&quot;https://hackernoon.com/introducing-nile-js-81d83a31cfe3&quot;&gt;[英]Introducing Nile.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;webRTC的集大成者，实现了p2p视频直播流。文章还讲述了为什么使用WebTorrent作为视频流，以及用户少的时候对速度的影响&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;前端技术&lt;/h2&gt;
&lt;h4 id=&quot;httpsgithubcomxitufront-end-handbook-2017&quot;&gt;&lt;a href=&quot;https://github.com/xitu/front-end-handbook-2017&quot;&gt;前端开发者指南&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一本可供任何人使用的指南，用于学习前端开发实践。该指南大体上勾勒出了前端工程的轮廓，同时也讨论了前端工程的实践。&lt;/p&gt;

&lt;h4 id=&quot;server-sent-events-httpwwwruanyifengcomblog201705server-senteventshtml&quot;&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html&quot;&gt;Server-Sent Events 教程&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;服务器向浏览器推送信息，除了 WebSocket，还有一种方法：Server-Sent Events，目前除了 IE/Edge，其他浏览器都支持。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;作品展示&lt;/h2&gt;
&lt;h4 id=&quot;repochrome-extensiongame-of-lifehttpsgithubcomyuanchuangame-of-life&quot;&gt;&lt;a href=&quot;https://github.com/yuanchuan/game-of-life&quot;&gt;[Repo]Chrome extension：Game of Life&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个利用 github 贡献版玩生命游戏的浏览器扩展，点子不错。&lt;/p&gt;

&lt;h4 id=&quot;v20httpsjuejinimentry5934d00eb123db00642591a9&quot;&gt;&lt;a href=&quot;https://juejin.im/entry/5934d00eb123db00642591a9&quot;&gt;小程序开发 - 小明带你找厕所 V2.0&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个简单好玩的程序，适合想撸小程序的开发者入门学习！&lt;/p&gt;

&lt;h4 id=&quot;jparticles-20-httpssegmentfaultcoma1190000009707074&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000009707074&quot;&gt;JParticles 2.0 发布，打造炫酷的粒子特效&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;其实是一个轻量级的 Canvas 粒子运动特效插件库，粒子运动、波纹运动、模拟波浪进度条&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实用技巧&lt;/h2&gt;
&lt;h4 id=&quot;little-things-i-like-to-do-with-githttpscsswizardrycom201705little-things-i-like-to-do-with-git&quot;&gt;&lt;a href=&quot;https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/&quot;&gt;[英]Little Things I Like to Do with Git&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;git使用中的一些小技巧&lt;/p&gt;

&lt;h4 id=&quot;repoalloyleverhttpsgithubcomalloyteamalloylever&quot;&gt;&lt;a href=&quot;https://github.com/AlloyTeam/AlloyLever&quot;&gt;[Repo]AlloyLever&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;1kb代码搞定开发调试发布，错误监控上报，用户问题定位&lt;/p&gt;

&lt;h4 id=&quot;http2-push-is-tougher-than-i-thoughthttpsjakearchibaldcom2017h2-push-tougher-than-i-thought&quot;&gt;&lt;a href=&quot;https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/&quot;&gt;[英]HTTP/2 push is tougher than I thought&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;“凡是页面加载的性能问题，都可以用http2 推送解决”，而对于几乎绝大部分网页，都可以使用http2推送。文章还提供了各主流浏览器的最佳实践。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;技术纵横&lt;/h2&gt;
&lt;h4 id=&quot;reddit-httpsredditblogcom20170602the-evolution-of-code-deploys-at-reddit&quot;&gt;&lt;a href=&quot;https://redditblog.com/2017/06/02/the-evolution-of-code-deploys-at-reddit/&quot;&gt;[英]Reddit 代码部署的演变&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在 Reddit， 每个工程师都要编写代码，进行代码审查，并定期发布到生产环境。类似的持续部署过程通常每周发生 200 次，而一次部署只需要不到 10 分钟。&lt;/p&gt;

&lt;h4 id=&quot;switching-from-react-to-vuejshttpvuejsdeveloperscom20170528switch-from-react-to-vue-js&quot;&gt;&lt;a href=&quot;http://vuejsdevelopers.com/2017/05/28/switch-from-react-to-vue-js/&quot;&gt;[英]Switching From React To Vue.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;目前最主流的两大框架，文章列举了两者在框架理念，组件化写法，模版，生命周期钩子等等的一系列差异&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;程序人生&lt;/h2&gt;
&lt;h4 id=&quot;httpsmediumcomevatrostlosbeing-a-junior-developer-at-30-38309f1daee8&quot;&gt;&lt;a href=&quot;https://medium.com/@eva_trostlos/being-a-junior-developer-at-30-38309f1daee8&quot;&gt;[英]作为一名 30 岁的初级开发人员&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;改变职业是可怕的，也可能是一个非常危险的决定。年龄越大，意味着切换工作领域的风险就越大，一切都从头开始。但作者却说，在 30 岁潜水进入科技领域是一个令人难以置信的冒险，充满难忘的经历，厉害的人以及巨大的机会。&lt;/p&gt;

&lt;h4 id=&quot;httpsmpweixinqqcomsbizmjm5mde0mjc4mamid2650996151idx1snad64621a47c38e5b952ab671f5ae3edbchksmbdbf05e48ac88cf2305eea94e6fea4bd4b73ffd460ecf8aaacc19a44e6cbbaef32ffd3d2696fscene21wechatredirect&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2650996151&amp;amp;idx=1&amp;amp;sn=ad64621a47c38e5b952ab671f5ae3edb&amp;amp;chksm=bdbf05e48ac88cf2305eea94e6fea4bd4b73ffd460ecf8aaacc19a44e6cbbaef32ffd3d2696f&amp;amp;scene=21#wechat_redirect&quot;&gt;[英]据说培养这些软技能，可以有效提升程序员的幸福感！&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一篇 程序猿 增强 “软技能” 提升的幸福感的 软文。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;团队&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT小组&lt;/a&gt; 出品，汇聚一周好文章，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27349942&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@CurtisCBS&lt;/a&gt; 中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工, 不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 从 C++ 走来，一路虐过 C#, Java, Python, Go, 现在写 Javascript&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 程序圈的间谍，我的梦想在浩瀚宇宙，我的征途是星辰大海&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/WangPeng2017&quot;&gt;@WangPeng2017&lt;/a&gt; 不想当大神的前端不是一个好码农&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/sturloly&quot;&gt;@sturloly&lt;/a&gt; 我常想，要是只会写代码，和咸鱼有什么区别？&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/elevenBeans&quot;&gt;@elevenBeans&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章，期待你们。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 12 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//weekly/2017/06/12/weekly.html</link>
        <guid isPermaLink="true">http://ctripfe.com//weekly/2017/06/12/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>喜欢用 Git 做的一些小事</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者：&lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;@csswizardry&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;原文：&lt;a href=&quot;https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/&quot;&gt;Little Things I Like to Do with Git&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;随便说点：这篇文章主要从管理者的角度谈论了使用 git 的心得，使用大量篇幅介绍 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 的一些方法和技巧。&lt;/p&gt;

  &lt;p&gt;同样地，发现很多人其实并没有深入全面地去了解过 git 的用法，作为一名开发人员，大多数时候只要会使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 似乎就足够，还有很大一部分人只使用特定的图形化工具。但事实上真的是这样吗，可能在遇到某个稍微高级一点的问题或者需求就手足无措。对于某个特定个体而言，很多场景我们未必会遇到，即使碰到也可以现场寻求搜索工具的帮助，这也是一种学习方式，无意否定这种方式，但最大的问题就是只见一叶而难以窥见森林。在这里推荐一个小工具 &lt;a href=&quot;https://github.com/Gazler/githug&quot;&gt;githug&lt;/a&gt;，通过一种比较轻松的游戏的方式来一探全貌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在跟我的朋友 Tim 聊天的时候，谈到我有多喜欢 Git。作为经常使用的一个工具，它强大而优雅。在这里，介绍一下我个人使用得最多，同时也是最有用的一些小技巧。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;管理者面板&lt;/h2&gt;

&lt;p&gt;无论你认为在工作中的游戏化（gamification）和竞争是好是坏，对于这个话题在不同的时间可能是完全不同的结论。但如果你对团队成员在项目中的提交数量感兴趣，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;shortlog&lt;/code&gt; 就可以找到答案：&lt;/p&gt;

&lt;p&gt;（请忽略我）&lt;/p&gt;

&lt;p&gt;（我只是占位的）&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git shortlog -sn
    80  Harry Roberts
    34  Samantha Peters
     3  Tom Smith
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shortlog&lt;/code&gt; 可以视作对 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 的概要。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;选项将隐藏提交描述，仅提供提交计数摘要&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; 选项将根据每个作者的提交数对输出进行排序，而不是默认的按作者字母顺序。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面显示的是项目生命周期的所有提交，但是如果想查看在特定时间内的情况，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--since&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;--until&lt;/code&gt; 选项：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git shortlog -sn --since&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'10 weeks'&lt;/span&gt; --until&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2 weeks'&lt;/span&gt;
    59  Harry Roberts
    24  Samantha Peters
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我为此配置了别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git stats&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;责任人&lt;/h2&gt;

&lt;p&gt;Git 有一个非常有用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;blame&lt;/code&gt; 功能，允许我们查看特定代码段的负责开发人员：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# See who last changed lines 5 through 10 of the buttons’ CSS:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git blame -L5,10 _components.buttons.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这一条放在这里讲好像有点过头，像是我们在找开发人员哪些地方做错了。但也不完全是这样，另一方面，他们可能已经做了一些我们想要了解的特别厉害或是印象深刻的事情。我们原本会问，哇！我之前还没有看到这个功能，还想知道是谁做的。&lt;/p&gt;

&lt;p&gt;由于是从 SVN 转到 Git，我使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;praise&lt;/code&gt; 作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;blame&lt;/code&gt; 的别名，这样二者都可以使用：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global alias.praise blame
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即，我也可以这样做：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Find out who implemented Resource Hints and buy them a coffee:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git praise -L18,23 _includes/head.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;只是一点小变化，但效果不错。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;隐藏空白提示&lt;/h2&gt;

&lt;p&gt;当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; 查看具有大量空白变化的版本对比时，会有很多视觉噪音干扰我们，使得很难看到更重要的变化内容。&lt;/p&gt;

&lt;p&gt;幸运的是，去除这种空白提示非常容易，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;git show&lt;/code&gt; 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; 选项就可以轻松搞定。比如，之前：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; a {
   color: $color-links;

-&amp;amp;:hover {
-  color: $color-links-hover;
-}
+  &amp;amp;:hover {
+    color: $color-links-hover;
+    text-decoration: underline;
+  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; 之后：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; a {
   color: $color-links;

   &amp;amp;:hover {
     color: $color-links-hover;
+    text-decoration: underline;
   }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在可以很容易看出，唯一有意义的变化是增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration: underline;&lt;/code&gt;，而其余​​的 &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; 是有点误导性的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;仅显示单词的变化而不是整行&lt;/h2&gt;

&lt;p&gt;写代码跟写文章不同，查看变化的单词而不是整行通常会更有用; 这在编辑 markdown 文档时尤其有用，就像现在。&lt;/p&gt;

&lt;p&gt;幸运的是，我们只要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--word-diff&lt;/code&gt; 选项就能显示单词的变化：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git diff --word-diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;跟不使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--word-diff&lt;/code&gt; 选项的区别还是很大的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-My friend Tom recently gave an excellent talk
+My good friend Tom gave an excellent talk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--word-diff&lt;/code&gt;，我们能得到更便于理解和更有用的概览：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;My {+good+} friend Tom [-recently-] gave an excellent talk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意只有变化的文本被突出显示（通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;[- -]&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;查看最近工作的分支&lt;/h2&gt;

&lt;p&gt;在任何给定的项目，在许多不同的分支之间切换是很常见的，并且跟踪它们可能相当棘手。我们可以让 Git 帮助我们解决这个问题：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;-each-ref --count&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 --sort&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-committerdate refs/heads/ --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(refname:short)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这个命令可以知道最近在工作的 10（–count=10）个分支，按照上次工作的时间排序。只显示本地分支（&lt;code class=&quot;highlighter-rouge&quot;&gt;refs/heads/&lt;/code&gt;），并通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--format&lt;/code&gt; 选项获得更友好的呈现方式。&lt;/p&gt;

&lt;p&gt;这是一个有点冗长的命令，所以我为此配置别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git recent&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.recent &lt;span class=&quot;s2&quot;&gt;&quot;for-each-ref --count=10 --sort=-committerdate refs/heads/ --format=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%(refname:short)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;看到每个人都在做什么&lt;/h2&gt;

&lt;p&gt;有时候，特别是对于团队领导，了解团队成员在所有分支的行为概览是很有用的。再一次地，Git 可以让这一切变得很容易：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --all --oneline --no-merges
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这可以得到一份关于所有人的日志报告简化版（带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-merges&lt;/code&gt; 选项）&lt;/p&gt;

&lt;p&gt;我们也可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--since&lt;/code&gt; 选项来限制返回的提交数量：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --all --since&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2 weeks'&lt;/span&gt; --oneline --no-merges
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样我们可以看到，在过去的两个星期里，每个人都在做什么。&lt;/p&gt;

&lt;p&gt;可以配置一个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git overview&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.overview &lt;span class=&quot;s2&quot;&gt;&quot;log --all --since='2 weeks' --oneline --no-merges&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;提醒你自己已经做了什么&lt;/h2&gt;

&lt;p&gt;当你回到一个比较旧的项目，或是在长时间休息之后回到办公室，可能不知道你最后在做什么工作，这种情况时常发生。我们可以通过 Git 轻松获得我们在项目中的工作情况：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --all --oneline --no-merges --author&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your email address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;和上一条很类似，只是我们将日志限制于我们自己的提交，也可以增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--since&lt;/code&gt; 限制。&lt;/p&gt;

&lt;p&gt;这也有一个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git recap&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.recap &lt;span class=&quot;s2&quot;&gt;&quot;log --all --oneline --no-merges --author=name@mail.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;今天的工作&lt;/h2&gt;

&lt;p&gt;同样地，不在这里讨论如何衡量开发人员的生产力，但我觉得让客户知道我在任何一天的工作情况是很有用的。不是要你保留完成任务的详细列表，我们可以使用 Git 获取所有这些信息：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --since&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;00:00:00 --all --no-merges --oneline --author&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your email address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这将记录（&lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt;） 你工作的所有（&lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt;）分支，谁（&lt;code class=&quot;highlighter-rouge&quot;&gt;--author&lt;/code&gt;）从（&lt;code class=&quot;highlighter-rouge&quot;&gt;--since&lt;/code&gt;）午夜开始都做了什么，（不包括合并提交 &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-merges&lt;/code&gt;），并提供一个简单的一行 （&lt;code class=&quot;highlighter-rouge&quot;&gt;--oneline&lt;/code&gt;） 概述。&lt;/p&gt;

&lt;p&gt;我有这个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git today&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.today &lt;span class=&quot;s2&quot;&gt;&quot;log --since=00:00:00 --all --no-merges --oneline --author=name@mail.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-8&quot;&gt;生成更改日志&lt;/h2&gt;

&lt;p&gt;维护一份 CHANGELOG 可能有点乏味，我们必须查看自上次发布以来所做的所有工作，然后提取其中有用的部分。幸运的是，我们可以使用 Git 来给我们一个好的开头：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges &amp;lt;last tag&amp;gt;..HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 是可选的，如果你省略（即… –no-merges &lt;last tag=&quot;&quot;&gt;..），`HEAD` 会是隐含的，当然这样可以节省几次敲击键盘的时间。&lt;/last&gt;&lt;/p&gt;

&lt;p&gt;这将创建一个简化的日志，显示最后一个发布版本和 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 之间的所有提交（不包括合并提交）。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges 1.0.0..
1257b95 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;refs &lt;span class=&quot;c&quot;&gt;#00019] Bump version&lt;/span&gt;
2b9b28e &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;refs &lt;span class=&quot;c&quot;&gt;#00019] Add auto width class&lt;/span&gt;
17b8eb1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;refs &lt;span class=&quot;c&quot;&gt;#00015] Tidy up README.md&lt;/span&gt;
bbe7d05 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;refs &lt;span class=&quot;c&quot;&gt;#00012] Rename Supercell main mixin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这告诉我，自从上次发布（1.0.0）到当前项目状态（&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;），已经完成哪些工作。这对于 CHANGELOG 来说是一个很好的参考。&lt;/p&gt;

&lt;p&gt;注意：不仅仅适用于 tag，还可以使用提交哈希。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;检查需要拉取哪些变化&lt;/h2&gt;

&lt;p&gt;如果你在一段时间内不在项目，可能需要先检查上游的变更，然后再将这些更新下载到本地分支。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges HEAD..&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：同样地，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 在这里是可选的，省略将使其隐含。&lt;/p&gt;

&lt;p&gt;例如，让我们来看看你在度假时在特性分支做了什么：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout feature/fonts
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git fetch
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges ..origin/feature/fonts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我使用这个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git upstream&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;检查即将上传的内容&lt;/h2&gt;

&lt;p&gt;最好的情况是可以经常提交和上传，但如果某种原因导致有大量的本地提交尚未上传，可以快速回顾一下都是什么。&lt;/p&gt;

&lt;p&gt;为了做到这一点，我们反转之前的命令就能轻松实现：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;..HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git fetch
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --oneline --no-merges origin/feature/fonts..HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：同样地，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 在这里是可选的，省略将使其隐含。&lt;/p&gt;

&lt;p&gt;这将记录 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 需要上传到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt; 的提交。&lt;/p&gt;

&lt;p&gt;我使用这个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git local&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;查看复杂日志&lt;/h2&gt;

&lt;p&gt;上面的每一个例子都使用简化的日志，因为只想快速了解发生了什么。对于更多细节，我使用带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;--graph&lt;/code&gt; 选项的日志和一些额外的选项：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --graph --all --decorate --stat --date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iso
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这将给出所有（&lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt;）分支基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;--graph&lt;/code&gt; 的提交记录 ` –stat&lt;code class=&quot;highlighter-rouge&quot;&gt;（添加，删除）日志。&lt;/code&gt;–decorate` 选项会告诉我们提交信息适用于那些分支，还包含一个更加严格的日期格式。&lt;/p&gt;

&lt;p&gt;我使用这个别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git graph&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.graph &lt;span class=&quot;s2&quot;&gt;&quot;log --graph --all --decorate --stat --date=iso&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 12 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//translator/2017/06/12/little-things-i-like-to-do-with-git.html</link>
        <guid isPermaLink="true">http://ctripfe.com//translator/2017/06/12/little-things-i-like-to-do-with-git.html</guid>
        
        
        <category>translator</category>
        
      </item>
    
      <item>
        <title>移除在 ESM 模式生成的严格模式</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;起源&lt;/h2&gt;

&lt;p&gt;项目升级构建方式，以前的代码采用 AMD 风格组织代码，并使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;r.js&lt;/code&gt; 完成打包优化工作。后续成员选择采用 ES6 的风格编写代码，然后 webpack + babel 完成打包构建。迁移工作并不如想象中那么容易，终于完成各种配置，测试时候发现问题：抛出一个语法错误。错误很快被定位，属于历史代码的不规范写法，之所以现在暴露出来是因为新的构建方式会加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;use strict&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;严格模式&lt;/h2&gt;

&lt;p&gt;在编写代码的过程中，我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt; 是一种很好的方式，严格模式会将 JavaScript 陷阱直接变成明显的错误，比如未声明导致的全局变量，可以让我们开发过程中就发现错误。&lt;/p&gt;

&lt;p&gt;众所周知，JavaScript 这门语言之前存在大量不好的设计，使用严格模式意味着在采用一种限制性更高的方式编写代码，同时更 “安全”。但这里所谓的安全在生产环境又可能是另外一回事，尤其是对于那些上了年纪的历史代码，我们更倾向于在生产环境去除严格模式。&lt;/p&gt;

&lt;h2 id=&quot;es2015&quot;&gt;ES2015+&lt;/h2&gt;

&lt;p&gt;现在大部分人已经在使用更强大，更具有表现力的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ES2015+&lt;/code&gt; 编写代码。可能还会使用到 babel 来转化成用于生产环境运行的代码，在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;preset es2015&lt;/code&gt; 时，会自动加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;“use strict”&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;babel 的处理方式是将 ES2015 模块转换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonJS&lt;/code&gt; 格式的，然后再统一处理，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-es2015-modules-commonjs&lt;/code&gt;，这个插件位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;preset es2015&lt;/code&gt; 中，并且依赖于 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-strict-mode&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;也许你会想去掉严格模式&lt;/h2&gt;

&lt;p&gt;也许你会想去掉严格模式，毕竟对于一些历史代码，很难预测加入严格模式会导致什么异常。&lt;/p&gt;

&lt;!-- 可以从两个方面来考虑： --&gt;

&lt;ul&gt;
  &lt;li&gt;第一，在处理过程中去掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;use strict&quot;&lt;/code&gt;，这里不用我们自己去写了，借助这个插件 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-remove-strict-mode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;第二，不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-es2015-modules-commonjs&lt;/code&gt;，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack 2&lt;/code&gt; 直接处理 ES6 模块&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;方案一&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install babel-plugin-transform-remove-strict-mode --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-remove-strict-mode&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;方案二&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-es2015/#optionsmodules&quot;&gt;modules&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | false&lt;/code&gt;, defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;commonjs&quot;&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;Enable transformation of ES6 module syntax to another module type.&lt;/p&gt;

  &lt;p&gt;Setting this to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; will not transform modules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们去掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;preset es2015&lt;/code&gt; 的模块处理，改由 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 来处理：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种方案也能解决之前问题，因为之前存在问题的模块使用 ES5 编写的，使用 AMD 风格。&lt;/p&gt;

&lt;p&gt;但是，参考 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code&lt;/a&gt; ，在 ES6 语法下，模块系统以及 class 等仍然都是工作在 &lt;code class=&quot;highlighter-rouge&quot;&gt;strict mode&lt;/code&gt; 下的，而 webpack2 的也确实是这样处理的。&lt;/p&gt;

&lt;p&gt;实现对语言本身是没问题的，使用新语法意味着我们要抛弃掉以前一些设计不好的地方，编写高质量的代码。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;对比&lt;/h3&gt;

&lt;p&gt;相比而言，方案二更合适，因为方案一处理的过程实际是删除所有&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;use strict&quot;&lt;/code&gt;，有时候未必符合你本来的意愿。&lt;/p&gt;

&lt;p&gt;采用方案二还有一些好处，比如可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack2&lt;/code&gt; 已经支持的 &lt;code class=&quot;highlighter-rouge&quot;&gt;tree shaking&lt;/code&gt; 优化技术，因为这项技术基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;ES6 Modules&lt;/code&gt;，得让 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 直接处理才能使用。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;后续&lt;/h2&gt;

&lt;p&gt;这种属于历史遗留问题，比如不小心引入的全局变量，类似的代码质量问题还不少。&lt;/p&gt;

&lt;p&gt;所以，我们使用 lint 工具来帮助我们避免这种问题，对于代码质量的要求必须苛刻。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//team/2017/06/05/remove-strict-node.html</link>
        <guid isPermaLink="true">http://ctripfe.com//team/2017/06/05/remove-strict-node.html</guid>
        
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>编写现代 JavaScript 代码</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原文作者：&lt;a href=&quot;https://twitter.com/scastiel&quot;&gt;Sébastien Castiel&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;原文链接：&lt;a href=&quot;https://dev.to/scastiel/writing-modern-javascript-code&quot;&gt;Writing modern JavaScript code&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;说点什么：这是一篇很朴素的文章，讲的道理都懂，但实际上，在工作中遇到类似的情形却未必如此，编写可维护，可阅读，更安全的代码是我们应有的责任。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是不是还认为 JavaScript 是一门用于在光标悬浮时改变页面元素的语言？这些日子已经不复存在，每一种语言都在随着时间推移而发展，我们使用语言的方式同样也在发展。看一下你一两年前写的代码：会感到羞愧吗？如果是的话，这篇文章应该很适合你。&lt;/p&gt;

&lt;p&gt;这里会列出一些所谓的最佳实践，目的是让你的 JavaScript 代码更容易编写，阅读和维护。&lt;/p&gt;

&lt;h2 id=&quot;linter&quot;&gt;使用可格式化代码的 linter&lt;/h2&gt;

&lt;p&gt;第一个建议是使用 linter 工具，可以帮助你检查在不同文件是否遵守一致的规则，尤其是当不同开发人员在同一个项目上工作：缩进，括号中的空格，替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; …&lt;/p&gt;

&lt;p&gt;但更重要的是，尽可能使用 linter 工具自动修复代码。&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; 就做得很好（带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;--fix&lt;/code&gt; 选项），而且与所有主流 IDE 完美集成，可以在保存时自动修复文件。&lt;/p&gt;

&lt;p&gt;还可以使用 &lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;Prettier&lt;/a&gt;，不过这款工具更注重格式化而不是静态检查，但处理后的结果基本相同。&lt;/p&gt;

&lt;p&gt;下一步将介绍与 linter 工具一起使用的规则：&lt;/p&gt;

&lt;h2 id=&quot;linter-&quot;&gt;为你的 linter 定制现代化的规则&lt;/h2&gt;

&lt;p&gt;如果不知道你的代码需要什么样的规则，可以参考：&lt;a href=&quot;https://standardjs.com/&quot;&gt;StandardJS&lt;/a&gt;。这是一个&lt;strong&gt;非常&lt;/strong&gt;严格的 linter，无法修改配置，但里面的每一条规则已经越来越多地被社区接纳。比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 2 个空格缩进（我曾经使用 4 个空格，但实际使用起来 2 个空格很不错）&lt;/li&gt;
  &lt;li&gt;不使用分号（一开始可能会觉得奇怪，但几天后就再也回不去了）&lt;/li&gt;
  &lt;li&gt;在关键字（如 if）和花括号使用空格，在括号不使用空格&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://standardjs.com/rules.html&quot;&gt;等等&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StandardJS 是一个独立的 Node 模块，可以进行 lint 和修复代码，但如果要在现有的大型项目中使用，并且想要停用一些规则（因为有些地方可能需要作大量修改），还可以使用 &lt;a href=&quot;https://github.com/feross/eslint-config-standard&quot;&gt;ESLint 预定配置&lt;/a&gt;。比如，我就停用了规则 &lt;a href=&quot;http://eslint.org/docs/rules/no-mixed-operators&quot;&gt;no-mixed-operators&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md&quot;&gt;import / no-webpack-loader-syntax&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;es2015-&quot;&gt;使用 ES2015+ 的新特性&lt;/h2&gt;

&lt;p&gt;如果你在使用 JavaScript 开发，根本没办法不听说 ES2015 +（或 ES6，ES7 …）的特性。有的已经是我离不开的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;箭头函数：对于函数式编程，比如写 &lt;code class=&quot;highlighter-rouge&quot;&gt;x =&amp;gt; x * 2&lt;/code&gt; 这样的函数非常有用（见下一点）&lt;/li&gt;
  &lt;li&gt;类：停止使用原型函数，使用类更酷炫（但不要滥用，JavaScript 比任何面向对象的语言好多了）&lt;/li&gt;
  &lt;li&gt;对数组和对象的操作：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingElse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingWithA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;otherResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'😺'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'🐶'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;otherResults&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// equivalent to { a: a, b: b }&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Also works with arrays!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `rest` looks like { b: ..., d: '🐶' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt; 编写更简单的异步处理：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Please try to write the same code with classic promises ;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getValueForA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getValueForBFromA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// parallel execution&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getValueForC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getValueForDFromB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculateTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想知道如何使用这些特性呢？&lt;a href=&quot;https://blog.castiel.me/posts/002-use-the-coolest-es6-features-everywhere.html&quot;&gt;我的另一篇文章能给一些建议&lt;/a&gt;。（顺便说一下，使用最新版本的 Node.js，可能不再需要 Babel 就能使用这些新特性）&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;使用函数式编程&lt;/h2&gt;

&lt;p&gt;函数式编程最近很热门，取得不少成就，而且不仅仅是在 JavaScript 中。为什么呢？函数式编程能使代码更具可预测性，确定性，更安全，一旦习惯这种方式，代码会更容易维护。这里有一些简单的建议：&lt;/p&gt;

&lt;p&gt;首先，停止使用 for 循环，在大多数（可能是所有？）情况下根本不需要。例如：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'first'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'second'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Instead of:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Prefer:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;calculatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好吧，这实际上是一个非常极端的例子，对于不习惯函数式编程的人而言，可能看起来更加复杂。但我们可以稍微简化一下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enrichElementWithCalculatedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;calculatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterElementsByValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aggregateElementInObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calculatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enrichElementWithCalculatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterElementsByValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aggregateElementInObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这里，我们定义了三个函数，其功能基本上与其名字一致。第二个建议：创建局部函数（即使是在已经存在的函数中）来说明代码的功能，不需要使用注释。&lt;/p&gt;

&lt;p&gt;注意，三个局部函数不修改它们的执行上下文。没有外部变量被修改，没有其他服务被调用…在函数式编程中，它们被称为&lt;em&gt;纯函数&lt;/em&gt;。纯函数具有很大的优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;很容易测试，因为从给定参数只有一个可能的结果，不管被调用了多少次;&lt;/li&gt;
  &lt;li&gt;无论应用状态如何，都能保证相同的结果;&lt;/li&gt;
  &lt;li&gt;应用状态在函数调用之前和之后保持不变。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以我的第三个建议是：尽可能地使用纯函数。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;其他的一些建议&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;习惯于使用异步代码，并多使用 promise，看看 &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;RxJS&lt;/a&gt; 的 observales（有&lt;a href=&quot;http://reactivex.io/learnrx/&quot;&gt;一个很棒的教程关于从函数式编程到响应式编程&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;写测试！这应该是很明显的，但是据我所知很多项目都有未经测试的代码，尽管测试 JavaScript（前端或后端）并不困难。&lt;/li&gt;
  &lt;li&gt;使用最新的语言特性：比如不要再写 &lt;code class=&quot;highlighter-rouge&quot;&gt;arr.indexOf(elem) !== -1&lt;/code&gt;，而应该写成 &lt;code class=&quot;highlighter-rouge&quot;&gt;arr.includes(elem)&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;大量阅读技术文章：&lt;a href=&quot;https://www.reddit.com/r/javascript/&quot;&gt;JavaScript subreddit&lt;/a&gt; 是了解目前社区最酷做法的一个很好的来源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总而言之，最好的建议就是：&lt;strong&gt;总是重构你的代码&lt;/strong&gt;。比如改进你一年前写过的模块？借此机会，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; 取代 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;，使用箭头函数或 &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt; 简化代码……和你喜欢的代码工作一件很愉悦的事。&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//translator/2017/06/02/writing-modern-javascript-code.html</link>
        <guid isPermaLink="true">http://ctripfe.com//translator/2017/06/02/writing-modern-javascript-code.html</guid>
        
        
        <category>translator</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2017.06.02期)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;node-8-releasedhttpsnodejsorgenblogreleasev800&quot;&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v8.0.0/&quot;&gt;Node 8 Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node 8 已经发布，带来一系列重大变化和更新，同时 NPM 也更新到 5.0.0。&lt;/p&gt;

&lt;h4 id=&quot;what-are-the-differences-between-the-lockfiles-of-yarn-and-npm-5httpsyarnpkgcomblog20170531determinism&quot;&gt;&lt;a href=&quot;https://yarnpkg.com/blog/2017/05/31/determinism/&quot;&gt;What are the differences between the lockfiles of Yarn and npm 5?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;NPM 5 重新设计 shrinkwrap，命名为锁包，跟 Yarn 的锁文件有什么区别呢？&lt;/p&gt;

&lt;h4 id=&quot;tiobe-index-for-may-2017httpswwwtiobecomtiobe-index&quot;&gt;&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;TIOBE Index for May 2017&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;值得关注的是 Go 的排名，从前一年的第 42 名上升到第 16 名！&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;http2-push-is-tougher-than-i-thoughthttpsjakearchibaldcom2017h2-push-tougher-than-i-thought&quot;&gt;&lt;a href=&quot;https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/&quot;&gt;HTTP/2 push is tougher than I thought&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者从性能方面挖掘了一些关于 HTTP / 2 推出的更细微的细节，并用一种易懂的方式叙述出来。&lt;/p&gt;

&lt;h4 id=&quot;docker-httpsblogfundebugcom20170531docker-and-vm&quot;&gt;&lt;a href=&quot;https://blog.fundebug.com/2017/05/31/docker-and-vm/&quot;&gt;虚拟机与 Docker 有何不同&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;各种虚拟机技术开启了云计算时代，而 Docker，作为下一代虚拟化技术，正在改变我们开发、测试、部署应用的方式。那虚拟机与 Docker 的区别究竟是什么？&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;redux-vs-mobx-httpswwwsitepointcomredux-vs-mobx-which-is-best&quot;&gt;&lt;a href=&quot;https://www.sitepoint.com/redux-vs-mobx-which-is-best/&quot;&gt;Redux vs MobX: 哪个更适合你的项目&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一篇很好的文章，提供一些非常不错的建议，帮助你更好地选择 Redux 还是 Mobx 作为状态管理解决方案。&lt;/p&gt;
&lt;h4 id=&quot;javascript-unit-testing-frameworks-comparing-jasmine-mocha-ava-tape-and-jesthttpsrayguncomblogjavascript-unit-testing-frameworks&quot;&gt;&lt;a href=&quot;https://raygun.com/blog/javascript-unit-testing-frameworks/&quot;&gt;JavaScript unit testing frameworks: Comparing Jasmine, Mocha, AVA, Tape and Jest&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;几大主流 JavaScript 单元测试框架对比，文章对于如何选择适合的单元测试框架给了一些建议。&lt;/p&gt;

&lt;h4 id=&quot;javascripthttpsgithubcomjawilblogissues20&quot;&gt;&lt;a href=&quot;https://github.com/jawil/blog/issues/20&quot;&gt;JavaScript正则进阶之路：活学妙用奇淫正则表达式&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;达成一个目的的方法很多种，文章用一种对比的思维来激发学习正则的兴趣。正则表达式是一块硬骨头，很难啃，但是啃着又很香，一旦用好又威力无穷。&lt;/p&gt;

&lt;h4 id=&quot;javascript--asyncawait--promise-httpswwww3ctechcomtopic2021&quot;&gt;&lt;a href=&quot;https://www.w3ctech.com/topic/2021&quot;&gt;JavaScript 的 Async/Await 完胜 Promise 的六个理由&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node 现在从版本 7.6 开始就支持 async/await 了。如果你还没有试过它，这里有一堆带有示例的理由来说明为什么你应该马上采用它，并且再也不会回头。&lt;/p&gt;

&lt;h4 id=&quot;promise-httpwebjobbolecom91406&quot;&gt;&lt;a href=&quot;http://web.jobbole.com/91406/&quot;&gt;30分钟彻底明白 Promise 原理&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文分析了 promise 的这种规则机制是如何实现的， 能够很好的帮助我们理解 then 和 resolve 函数的运行机理。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;nextjs-20httpszeitcoblognext2&quot;&gt;&lt;a href=&quot;https://zeit.co/blog/next2&quot;&gt;Next.js 2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Next.js 是一个用于在服务端渲染 React 应用程序的简单框架。处理了 React 同构代码的一些繁琐问题，简化了项目构建，支持各类功能，同时扩展也很灵活，对于要快速搭建 React 服务端渲染，是一个不错的选择。&lt;/p&gt;

&lt;h4 id=&quot;preact-cli-create-and-build-preact-apps-more-easily-toolshttpsgithubcomdevelopitpreact-cli&quot;&gt;&lt;a href=&quot;https://github.com/developit/preact-cli&quot;&gt;Preact CLI: Create and Build Preact Apps More Easily TOOLS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;preact-cli 脚手架，30 秒搭起 PWA 框架。&lt;/p&gt;

&lt;h4 id=&quot;codeifhttpsgithubcomunbugcodelf&quot;&gt;&lt;a href=&quot;https://github.com/unbug/codelf&quot;&gt;变量命名神器：codeif&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;当你不知道如何怎样给变量名字时，试试这个。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;between-the-wires-an-interview-with-vuejs-creator-evan-youhttpsmediumfreecodecampcombetween-the-wires-an-interview-with-vue-js-creator-evan-you-e383cbf57cc4&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.com/between-the-wires-an-interview-with-vue-js-creator-evan-you-e383cbf57cc4&quot;&gt;Between the Wires: An interview with Vue.js creator Evan You&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对尤雨溪的一篇采访，涉及到 Vue 作者的成长故事，编程经历以及关于 Vue 的种种故事，值得一看。&lt;/p&gt;

&lt;h4 id=&quot;httpmpweixinqqcomsad8xrlnmk4kjgadmx-bxxa&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/Ad8XrlNmk4kjgAdMx-bXXA&quot;&gt;互联网世界的神奇逻辑&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章讲述了互联网对于计算机基础设施的生态，工程师能力，对规模感知模糊，对创作者的距离，企业的生命周期，与大牛的链接的影响。思考一些在互联网才生效的神奇逻辑。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;团队分享&lt;/h2&gt;

&lt;h4 id=&quot;javascript-httpszhuanlanzhihucomp26567790&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26567790&quot;&gt;Javascript 模块现状&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一篇译文，主要介绍 ES Modlues 在浏览器，构建工具以及 Node.js 的实现，尤其是 Node.js 在实现上遇到的问题以及未来的发展方向，并对现在的开发者给出建议。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT小组&lt;/a&gt; 出品，汇聚一周好文章，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27208396&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@CurtisCBS&lt;/a&gt; 中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工, 不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 从 C++ 走来，一路虐过 C#, Java, Python, Go, 现在写 Javascript&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 程序圈的间谍，我的梦想在浩瀚宇宙，我的征途是星辰大海&lt;/p&gt;

  &lt;p&gt;感谢以下同学荐稿：&lt;a href=&quot;https://github.com/dongtc&quot;&gt;@dongtc&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章，期待你们。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 02 Jun 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//weekly/2017/06/02/weekly.html</link>
        <guid isPermaLink="true">http://ctripfe.com//weekly/2017/06/02/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>JavaScript 模块化现状</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原文作者：Johannes Ewald &lt;a href=&quot;https://twitter.com/Jhnnns&quot;&gt;@Jhnnns&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358&quot;&gt;The state of JavaScript modules&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;已获原作者授权翻译及发布&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ESM, CJS, UMD, AMD — 到底应该选择哪一个？&lt;/p&gt;

&lt;p&gt;最近 &lt;a href=&quot;https://twitter.com/addyosmani/status/859296190323597313&quot;&gt;在 twitter&lt;/a&gt; 上有很多关于 &lt;a href=&quot;http://2ality.com/2014/09/es6-modules-final.html&quot;&gt;ES Module&lt;/a&gt; 现状的讨论，&lt;a href=&quot;https://twitter.com/bradleymeck/status/863061949021650944&quot;&gt;尤其是在 Node.js 上&lt;/a&gt;，他们计划引入新的文件扩展名 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mjs&lt;/code&gt;。人们有足够理由对此感到 &lt;a href=&quot;https://twitter.com/tankredhase/status/861864123922907136&quot;&gt;担忧和不确定&lt;/a&gt;，因为这个话题异常复杂，接下来会尽力阐述清楚问题。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;来自远古的恐惧&lt;/h2&gt;

&lt;p&gt;大多数前端开发者应该还记得 &lt;a href=&quot;https://medium.com/@trek/last-week-i-had-a-small-meltdown-on-twitter-about-npms-future-plans-around-front-end-packaging-b424dd8d367a&quot;&gt;Javascript 依赖管理的黑暗时期&lt;/a&gt;。那个时候，你需要把一个库复制粘贴到 vendor 文件夹，然后作为一个全局变量引入，要自己去按次序组合所有东西，可能还要管理命名空间。&lt;/p&gt;

&lt;p&gt;在过去的那些年，我们能深刻体会到公共模块格式化和中央模块管理的价值。&lt;/p&gt;

&lt;p&gt;在今天，不管是发布还是使用一个库都要容易得多，只需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 命令就行。这就是人们会那么紧张两种模块系统兼容性问题的原因：他们不想失去已有的舒适区。&lt;/p&gt;

&lt;p&gt;接下来我会解释和总结现有实现的情况，以及为什么 Node 生态迁移到 ES Module（ESM）会那么难。在最后，总结这些变化对 webpack 使用者和模块作者有什么影响。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;现有实现&lt;/h2&gt;

&lt;p&gt;目前，ESM 有三种方式的实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浏览器&lt;/li&gt;
  &lt;li&gt;webpack 以及类似的构建工具&lt;/li&gt;
  &lt;li&gt;Node（未完成，&lt;a href=&quot;https://twitter.com/rauschma/status/866334160218095617&quot;&gt;但可能在年底作为一个实验功能&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了更好地理解现在的讨论，首先要知道 ES2015 包含两种模式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 用于具有全局命名空间的常规脚本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 用于具有明确导入和导出的模块化代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你试图在 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 标签使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句，会抛出一个 SyntaxError。这种语句在全局环境下没有任何意义。另一方面，&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 模式即意味着&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式&lt;/a&gt;，禁止使用某些语言特性，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; 语句。因此，需要在脚本被解析和执行之前定义模式。&lt;/p&gt;

&lt;h2 id=&quot;esm&quot;&gt;浏览器中的 ESM&lt;/h2&gt;

&lt;p&gt;截至到 2017 年 5 月，所有主流浏览器都开始做了 ESM 的实现工作。不过，大部分仍处于在实验性质。这里不会做详细介绍，因为 &lt;a href=&quot;https://jakearchibald.com/2017/es-modules-in-browsers/&quot;&gt;Jake Archibald 已经写了一篇很厉害的文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;除了一些小的困难，在浏览器中实现起来非常容易，因为以前并没有模块系统。想要指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 模式，需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 标签添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;module&quot;&lt;/code&gt; 属性，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在一个模块中，现在只能使用有效的 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; 作为模块标识符。模块标识符是用于 require 或 import 其他模块的字符串。为了确保未来兼容 CJS 模块标识符，“纯” 导入标识符（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;import &quot;lodash&quot;&lt;/code&gt;）现在还不支持。模块标识符必须是绝对 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; 或者是以 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，  &lt;code class=&quot;highlighter-rouge&quot;&gt;./&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt; 开头：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Supported:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://jakearchibald.com/utils/bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/utils/bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Not supported:&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utils/bar.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Example from https://jakearchibald.com/2017/es-modules-in-browsers/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样需要注意的是，一旦处在一个模块中，每个导入也将被解析为 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;，而且没有办法 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;esm--webpack&quot;&gt;ESM 与 webpack&lt;/h2&gt;

&lt;p&gt;类似 webpack 这样的构建工具通常会尝试用 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 模式解析代码，有问题再切回到 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 模式。这些工具最终会生成一段 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;，通常是在一定程度上模拟 CJS 和 ESM 行为的模块运行时。&lt;/p&gt;

&lt;p&gt;我们以这两个简单的	ESM	为例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// a.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// test.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;webpack 使用函数包装器封装模块范围和对象引用来模拟 &lt;a href=&quot;http://2ality.com/2015/07/es6-module-exports.html&quot;&gt;ESM 实时绑定&lt;/a&gt;。每次编译，还包括一个模块运行时，负责引导和缓存模块。此外，将模块标识转换为数字模块 ID。这样可以减少打包的大小和引导时间。&lt;/p&gt;

&lt;p&gt;这是什么意思呢？我们来看看编译输出：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is the module runtime.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// It's only included once per compilation.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Other chunks share the same runtime.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;installedModules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The require function&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moduleId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Load entry module and return exports&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An array that maps module ids to functions&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a.js as module id 0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_exports__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__webpack_exports__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// test.js as module id 1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_exports__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__WEBPACK_IMPORTED_MODULE_0__a__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Object reference as &quot;live binding&quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__WEBPACK_IMPORTED_MODULE_0__a__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* number */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简化的 webpack 输出，模拟 ES Modules 行为&lt;/p&gt;

&lt;p&gt;结果已经简化并删除了一些与此示例无关的代码。你会发现，webpack 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt; 对象上将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句替换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt;，并使用属性访问器替换对引入值的所有引用。还要注意每个 ESM 开始时的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;use strict&quot;&lt;/code&gt; 指令，这是由 webpack 自动添加，在 ESM 中必须是严格模式。&lt;/p&gt;

&lt;p&gt;这种实现只是模拟，因为它试图模仿 ESM 和 CJS 的行为 – 但不是与其完全保持一致。比如，这种模拟并不符合某些边缘情况。看下面这个模块：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你通过加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt; 的	Babel 来运行，结果是：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从输出结果可以看出，Babel 假设默认是 ESM，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 模式即代表严格模式，在严格模式下会将 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 初始化为 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然而，使用 webpack，结果是：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在引导模块时，&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 将指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt; ，与 Node.js 使用的 CJS 行为一致。这是因为语法上不确定是 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;，解析器无法判断该模块是 ESM 还是 CJS。在不明确的时候，webpack 会模拟 CJS，因为它仍然是最受欢迎的模块风格。&lt;/p&gt;

&lt;p&gt;这种模拟其实已经包含了很多情况，因为模块作者通常会避免这种代码。然而，“很多情况”对于像 Node.js 这样的平台是不够的，因为它需要保证所有有效的 JavaScript 代码都能正常运行。&lt;/p&gt;

&lt;h2 id=&quot;nodejs--esm&quot;&gt;Node.js 中的 ESM&lt;/h2&gt;

&lt;p&gt;Node.js 在执行 ESM 时遇到了麻烦，因为仍然需要支持 CJS，语法看起来相似，但运行时行为完全不同。&lt;a href=&quot;https://github.com/nodejs/CTC&quot;&gt;Node.js 核心技术委员会&lt;/a&gt;（CTC）成员 James M Snell 撰写了&lt;a href=&quot;https://hackernoon.com/node-js-tc-39-and-modules-a1118aecf95e&quot;&gt;一篇很好的文章来解释 CJS 与 ESM 之间的差异&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;归结起来，CJS 是一个动态模块系统，ESM 是静态模块系统。&lt;/p&gt;

&lt;h3 id=&quot;cjs&quot;&gt;CJS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;允许动态同步 &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;导出仅在模块执行后才知道&lt;/li&gt;
  &lt;li&gt;导出可以在模块初始化后添加，替换和删除&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;esm-1&quot;&gt;ESM&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;只允许静态同步 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在模块执行之前，导入和导出已经关联&lt;/li&gt;
  &lt;li&gt;导入和导出是不可变的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于	CJS 早于 ES2015，所以一直在 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 模式下解析，封装通过使用函数包装器实现。在 Node.js 中加载 CJS，实际上会执行与此类似的代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeRequireFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* YOUR CODE */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对 Node.js 的 CommonJS 模块的简单函数包装&lt;/p&gt;

&lt;p&gt;问题出现了，将两个模块系统集成到同一个运行时时，ESM 和 CJS 之间的循环依赖可能会迅速导致类似死锁的情况。&lt;/p&gt;

&lt;p&gt;而且，由于现有 CJS 模块数量庞大，也不能直接放弃对 CJS 的支持。为了避免 Node.js 生态的中断，有两点已经很明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;现有的 CJS 代码必须以相同的方式继续工作&lt;/li&gt;
  &lt;li&gt;两个模块系统都必须同时且尽可能无缝地工作&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;目前的权衡&lt;/h3&gt;

&lt;p&gt;2017 年 3 月，经过几个月的讨论，CTC 终于找到了一种解决问题的办法。由于在 ES 规范和引擎不改变的情况下无法进行无缝集成，&lt;a href=&quot;https://github.com/bmeck/node-eps/blob/a1eab9bf023bbe13a79ddb18f0622a5d57215f9b/002-es-modules.md&quot;&gt;CTC 决定开始一些权衡之后的实现工作&lt;/a&gt;：&lt;/p&gt;

&lt;h4 id=&quot;esm--mjs-&quot;&gt;1.ESM 必须是 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mjs&lt;/code&gt; 文件扩展名&lt;/h4&gt;

&lt;p&gt;这是由于上面提及的模糊语法问题，无法通过解析来确切知晓 JavaScript 代码是什么类型。为了 Node.js 向后兼容的目标，作者需要加入一种新模式。&lt;a href=&quot;https://github.com/nodejs/node/wiki/ES6-Module-Detection-in-Node#detection-problem&quot;&gt;已经有关于各种替代品的讨论&lt;/a&gt;，但使用不同文件扩展名是解决目前问题的最佳权衡。&lt;/p&gt;

&lt;h4 id=&quot;cjs--esm-import&quot;&gt;2.CJS 只能异步导入 ESM import()&lt;/h4&gt;

&lt;p&gt;Node.js 将异步加载 ESM，以便尽可能接近浏览器的行为。因此，同步的 &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; 在 ESM 是不可能的，并且依赖于 ESM 的每个功能都需要异步：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;driverPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dbdriver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFromDb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;driverPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;cjs--esm-&quot;&gt;3. CJS 向 ESM 暴露一个不可变的默认导出&lt;/h4&gt;

&lt;p&gt;使用 Babel 或 Webpack，我们通常将 CJS 重构为 ESM，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CJS&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ESM&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再一次地，他们的语法看起来很相似，但忽略了 CJS 中没有命名导出的事实。只有一个叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 的导出，等同于在 CJS 模块完成计算后一个不可变的 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; 。从技术上讲，有可能将 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; 解构成命名导入，但这需要对标准作更大的变更。&lt;a href=&quot;https://github.com/bmeck/node-eps/blob/a1eab9bf023bbe13a79ddb18f0622a5d57215f9b/002-es-modules.md#461-default-imports&quot;&gt;这就是现在 CTC 决定采取这种方式的原因&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;modulerequire--filename--esm-&quot;&gt;4.模块范围的变量类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; 以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;__filename&lt;/code&gt; 在 ESM 不存在&lt;/h4&gt;

&lt;p&gt;Node.js 和浏览器会实现一些 ESM 的特性，&lt;a href=&quot;https://github.com/whatwg/html/issues/1013&quot;&gt;但标准化过程仍在进行中&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;鉴于将 CJS 和 ESM 集成到一个运行时的工程挑战，CTC 在评估边缘情况和权衡方面做了非常好的工作。比如使用不同的文件扩展名是就是一个很简单的解决方案。&lt;/p&gt;

&lt;p&gt;实际上，一个文件扩展名可以认为是一个二进制文件如何解释的提示。如果一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; 不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;，我们应该使用不同的文件扩展名。其他工具（如 linter 或 IDE ）也可以获取相同信息。&lt;/p&gt;

&lt;p&gt;当然，引入新的文件扩展名有成本，但是一旦服务器和其他应用程序确认 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mjs&lt;/code&gt; 为JavaScript，我们很快就会忘记这个争议。&lt;/p&gt;

&lt;h2 id=&quot;mjs--nodejs--python-3&quot;&gt;将 * .mjs 作为 Node.js 的 Python 3？&lt;/h2&gt;

&lt;p&gt;考虑到所有这些限制，人们可能会问，这种过渡将对现在的生态造成什么样的损害。虽然 CTC 会努力解决问题，但社区如何采用这一点仍然存在很大不确定性。这种不确定性 &lt;a href=&quot;https://twitter.com/sindresorhus/status/861987349529452545&quot;&gt;被众多知名的 NPM 模块作者&lt;/a&gt; 再次强调，他们声称将不会在模块中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mjs&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.thezerobit.com/2014/05/25/python-3-is-killing-python.html&quot;&gt;Python 3 is killing Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很难预测社区如何反应，但是应该不会对现在的生态造成大破坏，甚至能看到从 CJS 平稳过渡到 ESM。主要有两个原因：&lt;/p&gt;

&lt;h3 id=&quot;cjs-&quot;&gt;1.与 CJS 严格向后兼容&lt;/h3&gt;

&lt;p&gt;那些不喜欢 ESM 的模块作者可以继续使用 CJS，保证自己不被排挤出局。这样他们自己的代码不会受到采用 ESM 的影响，降低迁移到另一个运行时的可能性，让 NPM 迁移到新生态变得容易。从 CJS 到 ESM 的重构给包维护者带来额外工作，不能指望所有人都有时间。&lt;/p&gt;

&lt;h3 id=&quot;cjs--esm--1&quot;&gt;2. CJS 在 ESM 中的无缝整合&lt;/h3&gt;

&lt;p&gt;从 ESM 导入 CJS 模块非常简单。需要注意的是，CJS 仅导出一个默认值。一旦处于 ESM，甚至可能根本不会注意到依赖关系使用的模块风格，尤其是与在 CJS 中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;await import()&lt;/code&gt;相比。&lt;/p&gt;

&lt;p&gt;由于 ESM 的这个优点以及其他有点，比如开箱即用的 &lt;a href=&quot;https://webpack.js.org/guides/tree-shaking/&quot;&gt;tree shaking&lt;/a&gt; 和浏览器兼容性，预计在未来几年内，我们可以看到向 ESM 的缓慢而稳定的过渡。CJS 的特性，如动态 &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; 和猴子补丁导出，在 Node.js 社区一直是有争议的，不比 ESM 带来的好处。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;这些对我来说意味着什么？&lt;/h2&gt;

&lt;p&gt;因为最近这些事情，很容易对目前存在的所有选择和限制感到困惑。在接下来，整理了开发人员面临的典型问题以及我们的回答：&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;现在需要重构现有的代码吗？&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;不需要&lt;/strong&gt;。Node.js 才刚刚开始实现 ESM，仍然有大量的工作要做。&lt;a href=&quot;https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c&quot;&gt;James M Snell 预计至少还需要一年时间&lt;/a&gt;，还有很多变化的余地，所以现在重构是不安全的。&lt;/p&gt;

&lt;h3 id=&quot;esm-&quot;&gt;应该在新代码中使用 ESM 吗？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;如果你已经有或者打算使用像 webpack 这样的构建工具，答案是肯定的&lt;/strong&gt;。这将更容易完成代码库的过渡，并使 tree shaking 成为可能。但要小心：一旦 Node.js 支持原生 ESM，可能需要重构其中的一些部分。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你正在编写一个库，答案是也肯定的&lt;/strong&gt;，你的模块使用者将受益于 tree shaking。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你不想进行构建操作，或者正在编写一个 Node.js 应用程序，还是用 CJS 吧&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mjs-&quot;&gt;现在应该使用 .mjs 吗？&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;不要这样做&lt;/strong&gt;，目前没有什么好处，工具支持依然薄弱。建议一旦原生 ESM 支持登陆 Node.js，尽快开始迁移。记住，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot;&gt;浏览器只关心 MIME 类型，而不是文件扩展名&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;应该关心浏览器兼容性吗？&lt;/h3&gt;

&lt;p&gt;是的，需要在一定程度上关注这个问题。 不应该在导入语句中省略 &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; 扩展名，因为浏览器需要完整的 URL，无法像 Node.js 这样执行路径查询。同样，应该避免 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 文件。不过，人们并不会很快在浏览器中使用 NPM 软件包，因为仍然不能 bare 导入。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;作为库作者该怎么办？&lt;/h3&gt;

&lt;p&gt;用 ESM 编写代码，并使用 &lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt; 或 Webpack 转换成单个 CJS 模块，然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 将 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; 字段指向此 CJS 包，并将 &lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;&lt;/a&gt; 字段指向原始 ESM。如果还使用 ESM 之外的其他新语言功能，则应编译成 ES5，并提供 CJS 和 ESM 的打包。这样，你的库用户仍然可以从 tree shaking 获利而无需对代码进行转换。&lt;/p&gt;

&lt;p&gt;看一下这些完成 tree shaking 的模块&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;关于 ES 模块有很多不确定性。由于目前 Node.js 在实现上的权衡，开发人员担心可能会破坏 Node.js 的生态。&lt;/p&gt;

&lt;p&gt;这些还不会发生，有两个原因：&lt;strong&gt;CJS 的严格的后向兼容和 CJS 在 ESM 中的无缝集成&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在 Node.js 发布原生 ESM 支持之前，应该仍然使用 Rollup 和 Webpack 等工具。它们在一定程度上模拟了 ESM 环境，但要注意它们不完全符合规范。此外，使用打包仍然是个&lt;a href=&quot;https://peerigon.github.io/talks/2016-08-26-jsconf-is-future-frontend-tooling/#36&quot;&gt;很好的选择&lt;/a&gt;，一旦可以在浏览器中使用 NPM 软件包。&lt;/p&gt;

&lt;p&gt;我们 webpack 团队正在努力做一些工作，帮助开发者平稳过渡。为了这个目标，我们计划在 Node.js 的 ESM 支持成熟后，模拟 Node.js 导入 CJS 的方式。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//translator/2017/05/29/the-state-of-javascript.html</link>
        <guid isPermaLink="true">http://ctripfe.com//translator/2017/05/29/the-state-of-javascript.html</guid>
        
        
        <category>translator</category>
        
      </item>
    
      <item>
        <title>JS/React 开发者的 Atom 终极配置</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原文作者：Elad Ossadon&lt;/p&gt;

  &lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/productivity-freak/my-atom-editor-setup-for-js-react-9726cd69ad20&quot;&gt;The Ultimate Atom Editor Setup (+for JS/React)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据多年以来不断完善 Sublime Text 配置的经验，决定这次给 Atom 也来一个大改造。这个过程花费了好几个月的时间，但成果还是很卓有成效的，我现在非常满意这份配置。&lt;/p&gt;

&lt;p&gt;这份清单将分为实用工具和 React 专用，并涉及到快捷键绑定。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;实用工具&lt;/h2&gt;

&lt;h3 id=&quot;atom-beautifyhttpsatomiopackagesatom-beautify&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-beautify&quot;&gt;atom-beautify&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;可以在 Atom 中 美化 HTML，CSS，JavaScript，PHP，Python，Ruby，Java，C，C ++，C＃，Objective-C，CoffeeScript，TypeScript，Coldfusion，SQL等。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌃+⌥+B&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;prettier-atomhttpsatomiopackagesprettier-atom&quot;&gt;&lt;a href=&quot;https://atom.io/packages/prettier-atom&quot;&gt;prettier-atom&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用 Prettier 来格式化 JavaScript 代码，配有强大的 ESlint 集成。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌃+⌥+F&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;atom-transposehttpsatomiopackagesatom-transpose&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-transpose&quot;&gt;atom-transpose&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Atom 的转置更像是字符串翻转。在 Sublime 可以将选中的两个字符串进行交换，看起来更有用。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥+T&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;case-keep-replacehttpsatomiopackagescase-keep-replace&quot;&gt;&lt;a href=&quot;https://atom.io/packages/case-keep-replace&quot;&gt;case-keep-replace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用这个插件可以在替换文本的时候可以保留原来的命名风格。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⌃+R&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;change-casehttpsatomiopackageschange-case&quot;&gt;&lt;a href=&quot;https://atom.io/packages/change-case&quot;&gt;change-case&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一个可以快速改变当前选择文本命名方式的工具。比如可以从 &lt;code class=&quot;highlighter-rouge&quot;&gt;camelCase&lt;/code&gt; 转换到 &lt;code class=&quot;highlighter-rouge&quot;&gt;snake_case&lt;/code&gt; 等。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+K ⌘+C/S&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;copy-pathhttpsatomiopackagescopy-path&quot;&gt;&lt;a href=&quot;https://atom.io/packages/copy-path&quot;&gt;copy-path&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;可以灵活地复制文件路径。&lt;/p&gt;

&lt;h3 id=&quot;duplicate-line-or-selectionhttpsatomiopackagesduplicate-line-or-selection&quot;&gt;&lt;a href=&quot;https://atom.io/packages/duplicate-line-or-selection&quot;&gt;duplicate-line-or-selection&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;重复选择文本或者重复一行，跟 Sublime Text 的行为一致，Atom 可以重复一整行。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧+D&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;editorconfighttpsatomiopackageseditorconfig&quot;&gt;&lt;a href=&quot;https://atom.io/packages/editorconfig&quot;&gt;editorconfig&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;帮助开发人员在不同的编辑器之间保持一致的编码风格。&lt;/p&gt;

&lt;h3 id=&quot;file-iconshttpsatomiopackagesfile-icons&quot;&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;file-icons&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Atom 的文件特定图标插件，便于区分不同文件类型。&lt;/p&gt;

&lt;h3 id=&quot;git-plushttpsatomiopackagesgit-plus&quot;&gt;&lt;a href=&quot;https://atom.io/packages/git-plus&quot;&gt;git-plus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;VIM 风格的 git 插件，在没有终端命令行的时候进行提交等其他 git 操作。&lt;/p&gt;

&lt;h3 id=&quot;highlight-selectedhttpsatomiopackageshighlight-selected&quot;&gt;&lt;a href=&quot;https://atom.io/packages/highlight-selected&quot;&gt;highlight-selected&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;通过双击一个词来高亮整个文件相同的词。&lt;/p&gt;

&lt;h3 id=&quot;local-historyhttpsatomiopackageslocal-history&quot;&gt;&lt;a href=&quot;https://atom.io/packages/local-history&quot;&gt;local-history&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;用于维护本地文件历史的插件（对代码文件进行更改的历史记录）。&lt;/p&gt;

&lt;h3 id=&quot;project-managerhttpsatomiopackagesproject-manager&quot;&gt;&lt;a href=&quot;https://atom.io/packages/project-manager&quot;&gt;project-manager&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;轻松访问所有项目，还能对项目特定设置和选项进行管理。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⌃+P&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;atom-reveal-file-in-finderhttpsatomiopackagesatom-reveal-file-in-finder&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-reveal-file-in-finder&quot;&gt;atom-reveal-file-in-finder&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;可以在工作区或者文件选项卡上打开文件到 Finder 上，快捷命令已经添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧*+P&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⌃+P&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;relatedhttpsatomiopackagesrelated&quot;&gt;&lt;a href=&quot;https://atom.io/packages/related&quot;&gt;related&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;related 提供了访问与当前打开的文件相关的文件的快速方式。 例如，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;.spec.js&lt;/code&gt; 文件之间切换。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧+ R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我的 JS 关联配置 (Menu &amp;gt; Packages &amp;gt; Related &amp;gt; Edit related patterns):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'([^\\/]+)(?!\\.spec).js(x?)$': [
  'tests/$1.spec.js$2#create',
]
'tests/(.+).spec.js(x?)$': [
  '$1.js$2',
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;set-syntaxhttpsatomiopackagesset-syntax&quot;&gt;&lt;a href=&quot;https://atom.io/packages/set-syntax&quot;&gt;set-syntax&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一种简单的命令方式来设置当前文件语法，与 Sublime 类似。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧+P&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;sort-lineshttpsatomiopackagessort-lines&quot;&gt;&lt;a href=&quot;https://atom.io/packages/sort-lines&quot;&gt;sort-lines&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;排序/删除重复行。&lt;/p&gt;

&lt;h3 id=&quot;sublime-style-column-selectionhttpsatomiopackagessublime-style-column-selection&quot;&gt;&lt;a href=&quot;https://atom.io/packages/Sublime-Style-Column-Selection&quot;&gt;sublime-style-column-selection&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;alt +单击跨行选择文本块，每行都有插入符号。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥+Drag&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;tab-foldername-indexhttpsatomiopackagestab-foldername-index&quot;&gt;&lt;a href=&quot;https://atom.io/packages/tab-foldername-index&quot;&gt;tab-foldername-index&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;可以替换 TAB 标签内容的插件，在打开相同文件名的文件时保证更高的可读性。&lt;/p&gt;

&lt;h3 id=&quot;sync-settingshttpsatomiopackagessync-settings&quot;&gt;&lt;a href=&quot;https://atom.io/packages/sync-settings&quot;&gt;sync-settings&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;跨 Atom 实例同步设置，键盘映射，用户样式，初始化脚本，代码段和已安装的软件包。 我将所有设置备份到 Gist 并在工作/个人计算机之间进行同步。&lt;/p&gt;

&lt;h3 id=&quot;toggle-quoteshttpsatomiopackagestoggle-quotes&quot;&gt;&lt;a href=&quot;https://atom.io/packages/toggle-quotes&quot;&gt;toggle-quotes&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;快速切换字符串的单引号和双引号。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧+’&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;atom-spotify2httpsatomiopackagesatom-spotify2&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-spotify2&quot;&gt;atom-spotify2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在 Atom 状态栏中显示在 Spotify 中当前播放歌曲。 不是必要的，但很有趣。&lt;/p&gt;

&lt;h2 id=&quot;htmlcssjsreact-specific-packages&quot;&gt;HTML/CSS/JS/React Specific Packages&lt;/h2&gt;

&lt;h3 id=&quot;atom-ternjshttpsatomiopackagesatom-ternjs&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-ternjs&quot;&gt;atom-ternjs&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用 Tern 为 Atom 提供 JavaScript 代码智能提示，支持 ES5，ES6，ES7，Node.js，jQuery，Angular等。&lt;/p&gt;

&lt;h3 id=&quot;atom-wrap-in-taghttpsatomiopackagesatom-wrap-in-tag&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-wrap-in-tag&quot;&gt;atom-wrap-in-tag&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;为选择的文本增加标签。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥+⇧+W&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;autoclose-htmlhttpsatomiopackagesautoclose-html&quot;&gt;&lt;a href=&quot;https://atom.io/packages/autoclose-html&quot;&gt;autoclose-html&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;自动添加关闭标签。&lt;/p&gt;

&lt;h3 id=&quot;autocomplete-moduleshttpsatomiopackagesautocomplete-modules&quot;&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-modules&quot;&gt;autocomplete-modules&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;自动补全 &lt;code class=&quot;highlighter-rouge&quot;&gt;require/import&lt;/code&gt; 声明。&lt;/p&gt;

&lt;h3 id=&quot;color-pickerhttpsatomiopackagescolor-picker&quot;&gt;&lt;a href=&quot;https://atom.io/packages/color-picker&quot;&gt;color-picker&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;很厉害的颜色选择器。&lt;/p&gt;

&lt;p&gt;快捷键：&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘+⇧+D&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;docblockrhttpsatomiopackagesdocblockr&quot;&gt;&lt;a href=&quot;https://atom.io/packages/docblockr&quot;&gt;docblockr&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;更容易的方式写文档注释。&lt;/p&gt;

&lt;p&gt;使用方式：&lt;code class=&quot;highlighter-rouge&quot;&gt; /** &amp;lt;tab&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;emmethttpsatomiopackagesemmet&quot;&gt;&lt;a href=&quot;https://atom.io/packages/emmet&quot;&gt;emmet&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一个大大提高 HTML 和 CSS 工作流程的插件。 &lt;a href=&quot;http://emmet.io/&quot;&gt;关于 Emmet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;emmet-jsx-css-moduleshttpsatomiopackagesemmet-jsx-css-modules&quot;&gt;&lt;a href=&quot;https://atom.io/packages/emmet-jsx-css-modules&quot;&gt;emmet-jsx-css-modules&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;适用于 css 模块的 emmet 工具。 &lt;code class=&quot;highlighter-rouge&quot;&gt;.foo&lt;/code&gt; 现在将扩展为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div className = {style.foo}&amp;gt; &amp;lt;/ div&amp;gt;&lt;/code&gt;，而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div className =“foo”&amp;gt; &amp;lt;/ div&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;es6-javascripthttpsatomiopackageses6-javascript&quot;&gt;&lt;a href=&quot;https://atom.io/packages/es6-javascript&quot;&gt;es6-javascript&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;一组专注 ES6，用于优化现代 JavaScript 开发生产力的命令集， 目标是符合 &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb 推荐的代码规范&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;js-hyperclickhttpsatomiopackagesjs-hyperclick--hyperclickhttpsatomiopackageshyperclick&quot;&gt;&lt;a href=&quot;https://atom.io/packages/js-hyperclick&quot;&gt;js-hyperclick&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://atom.io/packages/hyperclick&quot;&gt;hyperclick&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;点击跳到变量或者 import 定义，js-hyperclick 依赖于 hyperclick。&lt;/p&gt;

&lt;h3 id=&quot;pigmentshttpsatomiopackagespigments&quot;&gt;&lt;a href=&quot;https://atom.io/packages/pigments&quot;&gt;pigments&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在项目文件中显示颜色。&lt;/p&gt;

&lt;h3 id=&quot;linter-eslinthttpsatomiopackageslinter-eslint&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;插件 &lt;a href=&quot;https://github.com/AtomLinter/Linter&quot;&gt;Linter&lt;/a&gt; 为 &lt;a href=&quot;http://eslint.org/&quot;&gt;eslint&lt;/a&gt; 提供 UI 接口，用于对 JavaScript 文件进行静态检查。&lt;/p&gt;

&lt;h3 id=&quot;tree-view-copy-relative-pathhttpsatomiopackagestree-view-copy-relative-path&quot;&gt;&lt;a href=&quot;https://atom.io/packages/tree-view-copy-relative-path&quot;&gt;tree-view-copy-relative-path&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;允许从 tree view 复制文件的相对路径。&lt;/p&gt;

&lt;h3 id=&quot;lodash-snippetshttpsatomiopackageslodash-snippets&quot;&gt;&lt;a href=&quot;https://atom.io/packages/lodash-snippets&quot;&gt;lodash-snippets&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在 Atom 中快速使用 lodash 的代码提示。&lt;/p&gt;

&lt;h3 id=&quot;language-babelhttpsatomiopackageslanguage-babel&quot;&gt;&lt;a href=&quot;https://atom.io/packages/language-babel&quot;&gt;language-babel&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;支持 JavaScript ES201x，React JSX，Flow和GraphQL语法。&lt;/p&gt;

&lt;h3 id=&quot;react-es7-snippetshttpsatomiopackagesreact-es7-snippets&quot;&gt;&lt;a href=&quot;https://atom.io/packages/react-es7-snippets&quot;&gt;react-es7-snippets&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React ES7 snippets for atom&lt;/p&gt;

&lt;h3 id=&quot;atom-jest-snippetshttpsatomiopackagesatom-jest-snippets&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-jest-snippets&quot;&gt;atom-jest-snippets&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Jest 测试提示&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我的主题&lt;/h2&gt;

&lt;h3 id=&quot;ui-theme-one-dark-uihttpsatomiothemesone-dark-ui&quot;&gt;UI Theme: &lt;a href=&quot;https://atom.io/themes/one-dark-ui&quot;&gt;one-dark-ui&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;syntax-theme-dracula-themehttpsatomiothemesdracula-theme&quot;&gt;Syntax Theme: &lt;a href=&quot;https://atom.io/themes/dracula-theme&quot;&gt;dracula-theme&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;install-everything&quot;&gt;Install EVERYTHING!&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apm install atom-beautify prettier-atom atom-spotify2 atom-transpose case-keep-replace change-case copy-path duplicate-line-or-selection editorconfig file-icons git-plus highlight-selected local-history project-manager related set-syntax atom-reveal-file-in-finder sort-lines sublime-style-column-selection tab-foldername-index sync-settings toggle-quotes atom-wrap-in-tag atom-ternjs autoclose-html autocomplete-modules color-picker docblockr emmet emmet-jsx-css-modules es6-javascript js-hyperclick hyperclick pigments linter-eslint tree-view-copy-relative-path lodash-snippets language-babel react-es7-snippets atom-jest-snippets one-dark-ui dracula-theme
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 28 May 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//translator/2017/05/28/my-atom-editor-setup-for-js-react.html</link>
        <guid isPermaLink="true">http://ctripfe.com//translator/2017/05/28/my-atom-editor-setup-for-js-react.html</guid>
        
        
        <category>translator</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊（2017.05.26 期）</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;gitlab-92-httplinkzhihucomtargethttps3agithubcomgitlabhqgitlabhqblobmasterchangelogmd&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gitlabhq/gitlabhq/blob/master/CHANGELOG.md&quot;&gt;GitLab 9.2 发布，简化多人协作&amp;amp;增强本地化&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;GitLab 9.2 发布了，新版本旨在让团队的每个人都能够贡献他们力量，不管是远程或在同个房间。&lt;/p&gt;

&lt;h4 id=&quot;the-state-of-javascript-moduleshttplinkzhihucomtargethttps3amediumcomwebpackthe-state-of-javascript-modules-4636d1774358&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/webpack/the-state-of-javascript-modules-4636d1774358&quot;&gt;The state of JavaScript modules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍 ES Modules 在浏览器以及 Node.js 的现状。不同浏览器的最新版已经开始不同程度的支持，但具体规则还有待统一完善，而在 Node 的不确定性更多。但我们现在仍然可以使用 ESM 编写代码，再利用 Webpack，Rollup 以及 babel 等工具适配不同的环境。&lt;/p&gt;

&lt;h4 id=&quot;workbox-javascript-libraries-for-progressive-web-appshttplinkzhihucomtargethttps3aworkboxjsorg&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//workboxjs.org/&quot;&gt;Workbox: JavaScript Libraries for Progressive Web Apps&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Workbox 是对 Google 以前的 service worker 库的重新思考，重点是模块化。&lt;/p&gt;

&lt;h4 id=&quot;this-is-what-microsoft-said-about-progressive-web-apps-at-buildhttplinkzhihucomtargethttps3awwwthurrottcomwindowswindows-10116101microsoft-said-progressive-web-apps-build&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.thurrott.com/windows/windows-10/116101/microsoft-said-progressive-web-apps-build&quot;&gt;This is What Microsoft Said About Progressive Web Apps at Build&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者预测 Progressive Web Apps（PWAs）和其他混合应用程序将比 Windows 10 上的 Universal Windows Platform（UWP）应用程序更受欢迎。看看微软在 Build 大会是怎么谈论 PWAs 的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;vrwebvrhttplinkzhihucomtargethttp3ampweixinqqcoms-dy5bxsuldodde1gbclsog&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s/-Dy5BXSULDoDDE1gbclSOg&quot;&gt;VR进化论|教你搭建通用的WebVR工程&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文旨在介绍如何搭建WebVR工程以支持多场景开发。&lt;/p&gt;

&lt;h4 id=&quot;the-many-faces-of-functions-in-javascripthttplinkzhihucomtargethttps3abocoupcomblogthe-many-faces-of-functions-in-javascript&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//bocoup.com/blog/the-many-faces-of-functions-in-javascript&quot;&gt;the-many-faces-of-functions-in-javascript&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;js的函数使用到底有多少种 ？ 文章从最基础的函数声明及函数表达式切入，到构造函数，渐进到ES6的箭头函数、生成器，最后到ES7的各种异步函数，让你对javaScript的函数有个更全局的认识。&lt;/p&gt;

&lt;h4 id=&quot;httplinkzhihucomtargethttp3awwwruanyifengcomblog201705technology-is-futurehtml&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2017/05/technology-is-future.html&quot;&gt;技术决定历史&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文选自作者正在写的新书《未来世界的幸存者》，“主导历史的因素，短期（一年到几年）是政治，中期（几年到几十年）是经济，长期（几十年到几百年）则是技术” 。 试想过 如果中国参与了前两次世界革命，现在会是什么样？~~&lt;/p&gt;

&lt;h4 id=&quot;javascript-httpszhuanlanzhihucomp26709518&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26709518&quot;&gt;10 个基于 JavaScript 的机器学习实例&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;前端也能撸的机器学习案例， 我是看了第7个决定转的&lt;/p&gt;

&lt;h4 id=&quot;redisredishttplinkzhihucomtargethttp3alawtech0902com20170325redis-1&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//lawtech0902.com/2017/03/25/Redis-1/&quot;&gt;Redis学习笔记(一)：初识Redis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Redis的简介，安装（Mac)以及与memcached及其他类型数据库对比&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;前端技术&lt;/h2&gt;

&lt;h4 id=&quot;server-side-rendering-with-react-and-expresshttplinkzhihucomtargethttps3amediumcomfront-end-hackingserver-side-rendering-with-react-and-express-382591bfc77c&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/front-end-hacking/server-side-rendering-with-react-and-express-382591bfc77c&quot;&gt;Server side rendering with React and Express&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;实现express+react服务端渲染的基本套路&lt;/p&gt;

&lt;h4 id=&quot;reduxhttpszhuanlanzhihucomp27093191&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27093191&quot;&gt;Redux状态管理之痛点、分析与改良&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;深入分析了redux存在的一些问题&lt;/p&gt;

&lt;h4 id=&quot;httpszhuanlanzhihucomp26426054&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26426054&quot;&gt;单页应用的数据流方案探索&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;民工叔抽象的对单页数据流进行的分析，需要细读细思&lt;/p&gt;

&lt;h4 id=&quot;elmhttplinkzhihucomtargethttps3asegmentfaultcoma1190000005701562&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000005701562&quot;&gt;Elm入门实践（一）——基础篇&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Elm 是一门专注于Web前端的纯函数式语言。你可能没听说过它，但一定听说过Redux，而Redux的核心reducer就是受到了Elm的启发。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;nodemon-auto-restart-when-code-has-changedhttplinkzhihucomtargethttps3agithubcomremynodemon&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/remy/nodemon&quot;&gt;nodemon (auto restart when code has changed)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个实时检测服务端代码变动并重启的小工具&lt;/p&gt;

&lt;h4 id=&quot;node-inspector-debug-node-simply-in-browserhttplinkzhihucomtargethttps3agithubcomnode-inspectornode-inspector&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/node-inspector/node-inspector&quot;&gt;node-inspector (debug node simply in browser)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;用于在浏览器中调试node应用的小工具&lt;/p&gt;

&lt;h4 id=&quot;babel-clibabel-node-useful-when-we-use-lower-version-nodejs-to-develophttplinkzhihucomtargethttps3agithubcombabelexample-node-server&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/babel/example-node-server&quot;&gt;babel-cli/babel-node (useful when we use lower version node.js to develop)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;用低版本node.js开发环境中使用ES2015语法时必不可少的必备利器&lt;/p&gt;

&lt;h4 id=&quot;httplinkzhihucomtargethttp3awwwalloyteamcomnav&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.alloyteam.com/nav/&quot;&gt;前端网站分享&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是我见过最全的前端资源目录&lt;/p&gt;

&lt;h4 id=&quot;httplinkzhihucomtargethttps3ampweixinqqcomsmsdzycs1t6mh7wkxu-ogiw&quot;&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/MsDZycS1t6Mh7WkxU-OGiw&quot;&gt;如何开始写一本属于自己的技术书&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如题。如果你还没有写一本自己的技术书，又或是不知道从何开始，不妨读读作者的经验。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT小组&lt;/a&gt; 出品，汇聚一周好文章，&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27113543&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@CurtisCBS&lt;/a&gt; 中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工, 不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 从 C++ 走来，一路虐过 C#, Java, Python, Go, 现在写 Javascript&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 程序圈的间谍，我的梦想在浩瀚宇宙，我的征途是星辰大海&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/sturloly&quot;&gt;@sturloly&lt;/a&gt; building apps for my future starship&lt;/p&gt;

  &lt;p&gt;感谢以下同学荐稿：&lt;a href=&quot;https://github.com/elevenbeans&quot;&gt;@elevenbeans&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章，期待你们。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 26 May 2017 18:00:00 +0800</pubDate>
        <link>http://ctripfe.com//weekly/2017/05/26/weekly.html</link>
        <guid isPermaLink="true">http://ctripfe.com//weekly/2017/05/26/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
  </channel>
</rss>
