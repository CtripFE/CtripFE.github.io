<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELSE</title>
    <description>坐标上海，专注前端，基于Node全栈开发，欢迎加入我们.
</description>
    <link>http://else.vip//</link>
    <atom:link href="http://else.vip//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 03 Sep 2018 22:19:13 +0800</pubDate>
    <lastBuildDate>Mon, 03 Sep 2018 22:19:13 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>ELSE 技术周刊(2018.09.03期))</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;life-of-a-pixel让你更透彻知道浏览器是如何工作&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/87OYpou4ynpvYlcExEO40w&quot;&gt;Life of a Pixel，让你更透彻知道浏览器是如何工作&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Life of a Pixel这个演讲一开始是Chrome组新人入职的学习资料，给新人一个从高层次去看Chromium如何从HTML / CSS / JS 显示到屏幕的网页。这个演讲一直在更新，所以大家可以通过看这个演讲更新自己对Chromium的理解。展示Chromium从HTML到DomTree，整合CSS到LayoutTree，排版到PaintTree之后转成LayerTree转到compositing线程分块，光栅化到GPU，最后显示到屏幕。&lt;/p&gt;

&lt;h4 id=&quot;使用-javascript-的代价&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/0RMTdFa82kTjXdJ_x6vYWg&quot;&gt;使用 JavaScript 的代价！&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;建立交互式网站包括向用户发送 JavaScript 。通常，太多了。你是否经历过在一个手机页面上，它看起来已经加载好了，但是点击一个链接或者试图滚动页面的时候，什么也没发生？
一字节又一字节，JavaScript 仍然是我们发送给手机的代价最大的资源，因为它会很大程度上延迟交互。
现在我们讨论一些策略，可以让你高效地传送 JavaScript ，同时给用户提供一个有价值的体验。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;babel-7-released&quot;&gt;&lt;a href=&quot;https://babeljs.io/blog/2018/08/27/7.0.0&quot;&gt;Babel 7 Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;babel 7 版本发布，并提供工具自动完成升级。更快的速度，以及一系列新特性，新的 JavaScript 配置文件，对 TypeScript 的支持等。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;javascript集成sentry&quot;&gt;&lt;a href=&quot;http://www.bugs.cc/2018/08/24/JavaScript%E9%9B%86%E6%88%90Sentry/&quot;&gt;JavaScript集成Sentry&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sentry是一套用于捕获产品错误的开源项目，其下支持很多语言、框架。Sentry让开发人员快速准确的定位到问题的根源所在，以达到快速修复，让开发人员更注重于开发新的功能上面。减少时间资源上的浪费。&lt;/p&gt;

&lt;h4 id=&quot;react-firereact-dom-的改造计划使其更现代化&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/99528/react-fire-modernizing-react-dom&quot;&gt;React Fire：React DOM 的改造计划，使其更现代化&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;React 开发者，同时也是 Redux 和 Create React App 作者之一的 Dan Abramov gaearon 昨日在 React 的 GitHub 仓库提了一个这样的 issue —— React Fire: Modernizing React DOM（React Fire：使 React DOM 现代化）。他表示目前随着对 React 的底层基础改造工作越来越接近尾声，维护团队开始考虑如何使 React 更好地与 DOM 的工作方式保持一致，并重新审视了过去一些导致大量问题的有争议的决策，同时希望使 React 变得更小更快。&lt;/p&gt;

&lt;h4 id=&quot;一口很长的气了解-babel&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43249121&quot;&gt;一口（很长的）气了解 babel&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;说到 babel，一连串名词会蹦出来：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;babel-cli
babel-core
babel-runtime
babel-node
babel-polyfill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这些都是 babel 吗？他们分别是做什么的？有区别吗？&lt;/p&gt;

&lt;h4 id=&quot;前端监控和前端埋点方案设计&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015864670&quot;&gt;前端监控和前端埋点方案设计&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章总结了 前端埋点的场景和常用埋点方案， 包括对埋点方案选型和前端上报方案设计。&lt;/p&gt;

&lt;h4 id=&quot;揭密react-setstate&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43522965&quot;&gt;揭密React setState&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;学过react的人都知道，setState在react里是一个很重要的方法，使用它可以更新我们数据的状态，本篇文章从简单使用到深入到setState的内部，全方位为你揭开setState的神秘面纱~&lt;/p&gt;

&lt;h4 id=&quot;复杂-react-应用中的typescript-30实践&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42141179&quot;&gt;复杂 React 应用中的TypeScript 3.0实践&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本篇描述了如何使用 TypeScript 来高效编写复杂的 React 应用。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;唯品会的service-mesh三年进化史&quot;&gt;&lt;a href=&quot;http://calvin1978.blogcn.com/?p=1779&quot;&gt;唯品会的Service Mesh三年进化史&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;唯品会的服务化体系OSP(Open Service Platform) 在三年前就走上了ServiceMesh的路。每种架构风格，由于各司不同的历史因果，现实状况，以及对采纳新架构的诉求和希望，都会有不同的实现路线。我们的SM在实战中一点点演化而来，与 Istio由谷歌IBM的超级架构师们画出来的架构也有不同之处。希望通过分享我们的演进过程，能给各司里同样在往SM演进中的架构师们一个参考。&lt;/p&gt;

&lt;h4 id=&quot;best-practices-for-mobile-form-design&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/08/best-practices-for-mobile-form-design/&quot;&gt;Best Practices For Mobile Form Design&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作为设计师应该如何使填写表单的过程尽可能简单，创建快速且顺滑的交互体验，提高表单的可用性，文章列举了一系列最佳实践&lt;/p&gt;

&lt;h4 id=&quot;蚂蚁金服移动端可视化解决方案-f2-32-发布-因你而动&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43130006&quot;&gt;蚂蚁金服移动端可视化解决方案 F2 3.2 发布， 因你而动&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;F2，一个专注于移动，开箱即用的可视化解决方案，完美支持 H5 环境同时兼容多种环境（node, 小程序，weex）。完备的图形语法理论，满足你的各种可视化需求。专业的移动设计指引为你带来最佳的移动端图表体验。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;团队协作中的-github-flow-工作流程&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39148914&quot;&gt;团队协作中的 Github flow 工作流程&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章介绍一套基于 Github flow 的 Git 操作流程，可以让大家跟规范的使用 Git 操作流程，规范的 Commit Message。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;独角兽的cto是怎么炼成的&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tm4w0bTC3JpAyOWalOSkYw&quot;&gt;独角兽的CTO是怎么炼成的&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者以个人经历分享如何一步步成为 CTO，介绍了自己对于 CTO角色定位、使命以及技能包的理解，并针对工程师的个人成长和职业生涯规划给出了建议。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 03 Sep 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/09/03/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/09/03/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.08.27期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;译-rxjs-高级缓存&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42264563&quot;&gt;[译] RxJS 高级缓存&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文使用 RxJS 和 Angular 提供的工具来开发一个高级缓存机制， 详细的介绍了在大量使用 Observables的应用中如何创建高级缓存机制。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;github上发布一天star数破4k的项目了解一下&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016145025&quot;&gt;Github上发布一天Star数破4K的项目了解一下&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;国外大神把 Windows 95 打包成了 APP，纪念它发布 23 周年。这个项目在昨天被开源在了Github上，不过一天Star数就已经突破4K，截止现在2018-8-25-9:08 Star数已经有5.3k，[Github地址]
(https://github.com/felixrieseberg/windows95/releases)。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;css垂直居中技巧我只会23个你会几个&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/CvLXXDV_0J-rF-85AWjgsw&quot;&gt;CSS垂直居中技巧，我只会23个，你会几个？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;网页CSS的垂直居中需求始终没有停过，而其困难度也始终没有让人轻松过，经过了每位开发先烈的研究后，据说CSS的垂直居中技巧已达到近十种之多，但始终鲜为人知，部分公司甚至将CSS的垂直居中技巧当成面试题，其重要性可见一斑&lt;/p&gt;

&lt;h4 id=&quot;workerdom-concurrency-for-javascript-programming-with-the-dom&quot;&gt;&lt;a href=&quot;https://www.ampproject.org/latest/blog/workerdom/&quot;&gt;WorkerDOM: Concurrency for JavaScript programming with the DOM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在AMP技术标准下无法直接引入第三方JS的局限一直广被诟病，即使AMP支持采用web worker的方案引入第三方JS，对于实际开发来说也是远远不够用的。好消息是，Google终于承诺在不久的将来可以通过amp-script引入第三方JS，并且支持DOM操作。抢鲜看AMP如何玩转web worker ，如何在web worker中支持document操作的。&lt;/p&gt;

&lt;h4 id=&quot;anu小程序&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42788287&quot;&gt;anu小程序&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;anu小程序是去哪儿网推出的基于anujs的React转微信小程序方案。&lt;/p&gt;

&lt;h4 id=&quot;css混合模式高级应用&quot;&gt;&lt;a href=&quot;http://www.w3cplus.com/css/advanced-effects-with-css-background-blend-modes.html&quot;&gt;CSS混合模式高级应用&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;CSS 混合模式特性是一项非常强大的特性，利用这些特性可以直接在客户端实现类似专业图像处理软件的一些效果。文章通过几个示例，向大家展示了 CSS 混合模式的强大之处，以及可使用的场景。&lt;/p&gt;

&lt;h4 id=&quot;三角函数在前端动画中的应用&quot;&gt;&lt;a href=&quot;https://w3ctrain.com/2018/08/20/trigonometry-you-must-know/&quot;&gt;三角函数在前端动画中的应用&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文展示了常用的三角函数在前端动画中的应用&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;如何精确统计页面停留时长&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EAakxFjIEl-6YwFnqgPPjQ&quot;&gt;如何精确统计页面停留时长&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;页面停留时间（Time on Page）简称 Tp，是网站分析中很常见的一个指标，用于反映用户在某些页面上停留时间的长短，传统的Tp统计方法会存在一定的统计盲区，比如无法监控单页应用，没有考虑用户切换Tab、最小化窗口等操作场景。 基于上述背景，重新调研和实现了精确统计页面停留时长的方案，需要 兼容单页应用和多页应用，并且不耦合或入侵业务代码。&lt;/p&gt;

&lt;h4 id=&quot;干货--关于apple-pay接入和开发看这一篇就够了&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ZDOhluJqpFLusdzXk35cHw&quot;&gt;干货 | 关于Apple Pay接入和开发，看这一篇就够了&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apple Pay 是苹果 2014 年发布的 iOS8 开始支持的一项新功能，2016 年 iOS9 开始支持中国银联卡，Apple Pay 凭借其支付安全，简洁快速的用户体验，开发接入简单，在国内市场占据了一席之地。&lt;/p&gt;

&lt;h4 id=&quot;你应该知道的缓存进化史&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wnPrE4MglmCFxyAwtTh_5A?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;你应该知道的缓存进化史&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文主要讲了爱奇艺的缓存之路和本地缓存的一个发展历史(从古至今到未来），以及每一种缓存的实现基本原理。当然要使用好缓存光是这些仅仅不够，比如本地缓存如何在其他地方更改了之后同步更新，分布式缓存，多级缓存等等&lt;/p&gt;

&lt;h4 id=&quot;如何实现靠谱的分布式锁&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/emEuhftLbAQmdn1LQYOSBw&quot;&gt;如何实现靠谱的分布式锁？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;分布式锁，是用来控制分布式系统中互斥访问共享资源的一种手段，从而避免并行导致的结果不可控。基本的实现原理和单进程锁是一致的，通过一个共享标识来确定唯一性，对共享标识进行修改时能够保证原子性和和对锁服务调用方的可见性。由于分布式环境需要考虑各种异常因素，为实现一个靠谱的分布式锁服务引入了一定的复杂度。&lt;/p&gt;

&lt;h4 id=&quot;简析面向切面编程aop&quot;&gt;&lt;a href=&quot;https://webfe.kujiale.com/aop-programming/&quot;&gt;简析面向切面编程（AOP）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;简述了面向切面编程的思想 ，以及在前端领域其使用的场景和应用， 深入理解后在开发中对代码的结构划分更加立体。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;在-linux-中使用-top-命令的建议&quot;&gt;&lt;a href=&quot;https://linux.cn/article-9937-1.html&quot;&gt;在 Linux 中使用 top 命令的建议&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;通过这篇教程提升你的 top 命令的知识。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;技术的学习与练习&quot;&gt;&lt;a href=&quot;https://www.phodal.com/blog/how-to-learn-skill/&quot;&gt;技术的学习与练习&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者在这里介绍一种自己在学习和应用新技术的一种模式，用以获取相应的经验，并分享在一些练习技巧。&lt;/p&gt;

&lt;h4 id=&quot;聊聊工程师的影响力&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Oj1g2BJOgy129Zjds91xLw&quot;&gt;聊聊工程师的影响力&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;作为一名工程师，你是如何获得影响力的？什么是影响力，它的根源是什么，你该如何运用它或者怎样会失去它？它与管理者的权力和影响力有什么不同？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/43018838&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 27 Aug 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/08/27/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/08/27/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.08.13期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;node-案发现场揭秘--coredump-还原线上异常&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41178823&quot;&gt;Node 案发现场揭秘 —— Coredump 还原线上异常&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍了一种基于 Core dump 来分析定位线上应用故障的方法，经验来自过去几年亲身经历过的线上故障。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;谷歌dart2正式发布目标成为移动与web开发主流语言&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/y9_gjWZrRtMuVxS2yVA6KQ&quot;&gt;谷歌Dart2正式发布，目标成为移动与Web开发主流语言！&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dart 2 正式发布，标志着 Dart 语言的重启，目标成为主流的移动和 Web 开发语言。同时，Google 还宣布重构 Dart Web 平台，这对开发者来说，是一个高效率、高性能和可扩展的组合。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;前端性能优化之-composite&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41472193&quot;&gt;前端性能优化之 Composite&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个 Web 页面的展示，简单来说可以认为经历了 JavaScript/Style/Layout/Paint/Composite 几个步骤。本文主要深入 Composite 部分，从渲染原理、Composite 原因以及如何针对其进行性能优化等进行展开。&lt;/p&gt;

&lt;h4 id=&quot;聊聊css中的层叠相关概念&quot;&gt;&lt;a href=&quot;https://www.w3cplus.com/css/understand-css-stacking-context-order-z-index.html&quot;&gt;聊聊CSS中的层叠相关概念&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章总结了CSS中的层叠相关的知识， 对文档流（Normal Flow）、格式化上下文（Formatting Context）、层叠上下文（Stacking Context）、层叠水平（Stacking Level） 和 层叠顺序（Stacking Order）等相关概念也有介绍， 可以充分理解z-index的运用。&lt;/p&gt;

&lt;h4 id=&quot;how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript&quot;&gt;&lt;a href=&quot;https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/&quot;&gt;How to Deal with Dirty Side Effects in Your Pure Functional JavaScript&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在函数式编程中如何处理纯函数中的副作用。&lt;/p&gt;

&lt;h4 id=&quot;why-website-body-text-should-be-bigger-and-ways-to-optimize-it&quot;&gt;&lt;a href=&quot;https://blog.marvelapp.com/body-text-small/&quot;&gt;Why website body text should be bigger, and ways to optimize it.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为什么认为很多站点的字体都过于小，更大的正文文本的好处是什么，以及如何进行优化。&lt;/p&gt;

&lt;h4 id=&quot;为什么我不使用-shrinkwraplock&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22934066&quot;&gt;为什么我不使用 shrinkwrap（lock）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;关于在项目中如何管理依赖包的版本，如何安全地升级依赖包，本文给出了一些很好的思考点。&lt;/p&gt;

&lt;h4 id=&quot;2018年你需要知道的13个javascript工具库&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38795426&quot;&gt;2018年你需要知道的13个JavaScript工具库&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;JavaScript依然是2018年最受欢迎、最流行的编程语言，虽然标准库不足以应付各种开发需求，但在社区有许多流行的JavaScript库，文章整理了一份列表推荐。&lt;/p&gt;

&lt;h4 id=&quot;如何正确使用-asyncawait&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/javascript-async-await-the-good-part-pitfalls-and-how-to-use&quot;&gt;如何正确使用 async/await&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;async/await 是 JavaScript 异步编程的一项重大改进，文章介绍如何正确有效地使用，避免掉进陷阱。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;朴素的devops价值观&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/r54IpCLMofoH5DGxwqZe8g&quot;&gt;朴素的DevOps价值观&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从 DevOps 涉及到的几个维度出发：业务、架构与技术；人、流程与工具；原则，方法与实践，总结出朴素的 DevOps 价值观。&lt;/p&gt;

&lt;h4 id=&quot;30种共识算法完全列表&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/consensuspedia-an-encyclopedia-of-29-consensus-algorithms&quot;&gt;30种共识算法完全列表&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;共识算法是所有区块链/DAG的基础，它们构成了区块链/DAG平台中的最重要部分。本文中尽可能列出所有主要的共识算法，并评估了各自的优劣之处。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;nodejs-最佳实践&quot;&gt;&lt;a href=&quot;https://github.com/i0natan/nodebestpractices/&quot;&gt;Node.js 最佳实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node 大型项目的最佳时间，支持多语言阅读。&lt;/p&gt;

&lt;h4 id=&quot;jsinspect&quot;&gt;&lt;a href=&quot;https://github.com/danielstjules/jsinspect&quot;&gt;jsinspect&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;软件项目中，同一段逻辑不应该有多个实现。jsinspect 就是用来查出重复代码的工具。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;观点--蚂蚁金服玉伯我们是如何从前端技术进化到体验科技的&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/IYddaaw2ps1wR2VT1dZWPg&quot;&gt;观点 | 蚂蚁金服玉伯：我们是如何从前端技术进化到体验科技的&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;玉伯分享了从前端一路进阶升级到体验科技的个人思考，并详细介绍了体验科技的历史及未来发展。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/41869734&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 13 Aug 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/08/13/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/08/13/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.08.06期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;javascript-为什么快第一篇&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41130608&quot;&gt;JavaScript 为什么快——第一篇？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为啥升级了 Node.js 版本，速度会提升？
为啥 Node.js 代码启动时那么慢，运行起来了会变快？
V8 JIT 是啥？&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;typescript-30重磅发布新特性详解&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qLyXpECAUai26fWUkUuxpg&quot;&gt;TypeScript 3.0重磅发布，新特性详解！&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;微软正式发布 TypeScript 3.0，这是 TypeScript 之旅的一个新的里程碑！新版本引入了一种新的灵活且可扩展的方式来构建项目、对操作参数列表提供了更强大的支持、新的强制显式检查类型、更好的 JSX 支持、更好的错误 UX等。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;css-字体新玩法之彩色字体&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40865068&quot;&gt;CSS 字体新玩法之彩色字体&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如果你们设计师想在某些特别的专题活动中使用下图的字体作为标题字体进行展现，怎么办呢？做成图片咯。然后你可能会遇到这几个问题：不同屏幕下的适配，要是只做一种尺寸的图，放大或缩小后的效果都不太好。直接做成 SVG？好像不能复制到 Word 里面加粗啊，也就是说，这种做法使得这些“文字”本身失去了真实文字该有的能力。&lt;/p&gt;

&lt;p&gt;此时彩色字体的好处就显现出来了。既能达到视觉效果上的要求，还拥有常规文字的功能，能够复制，能够粘贴，还可以被屏幕阅读器阅读，丝毫不妨碍常规操作。&lt;/p&gt;

&lt;h4 id=&quot;nodejs浅析高并发与分布式集群&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41118827?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;from=singlemessage&amp;amp;isappinstalled=0&amp;amp;wechatShare=1&quot;&gt;Node.js：浅析高并发与分布式集群&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文从node的基础概念层面出发，浅析高并发与分布式集群，如果你以前没有了解过这块知识，可以将此文作为入门级知识。&lt;/p&gt;

&lt;h4 id=&quot;were-under-attack-23-nodejs-security-best-practices&quot;&gt;&lt;a href=&quot;https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d&quot;&gt;We’re under attack! 23+ Node.js security best practices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;包含 23 条 Node.js 安全最佳实践清单，来自目前最流行的文章总结。&lt;/p&gt;

&lt;h4 id=&quot;the-cost-of-javascript-in-2018&quot;&gt;&lt;a href=&quot;https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4&quot;&gt;The Cost Of JavaScript In 2018&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;性能优化是一件需要持续关注的话题，JavaScript 开销 18年版，介绍当前现状以及可以着力优化的点。&lt;/p&gt;

&lt;h4 id=&quot;深入解析es-module&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40733281?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;深入解析ES Module&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;同构项目常会遇到对cjs和esm的模块的混合使用，这中间webpack和babel帮你做了哪些事?&lt;/p&gt;

&lt;h4 id=&quot;chrome-extension-通信机制&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pfZgw2YOPU9ZEyfkQGsDQg&quot;&gt;Chrome Extension 通信机制&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chrome Extension的background，popup，content_script三者之间的通信机制。&lt;/p&gt;

&lt;h4 id=&quot;图解-react-native&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/44wSNY5Uazk2watiOiPeVw&quot;&gt;图解 React Native&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在 图解 React中，我们介绍了什么是 React 以及是什么使得它如此特别。今天我们将介绍 React Native: 它是做什么的？它出自何处？它和 React 有哪些不同之处？以及为何它如此令人振奋。&lt;/p&gt;

&lt;h4 id=&quot;prepack-的最新-pr英&quot;&gt;&lt;a href=&quot;https://github.com/facebook/prepack/pull/2264&quot;&gt;PrePack 的最新 PR(英)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;最新 PR，把编译后端从 Node 改成了LLVM，使得 JS 可以编译成 webAssembly 甚至汇编语言了。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;写好shell脚本的13个技巧&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/13-tips-tricks-for-writing-shell-scripts-with-awesome-ux&quot;&gt;写好shell脚本的13个技巧&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章大致总结了一些Shell脚本简单易用的技巧，让shell脚本更易于调试和使用。&lt;/p&gt;

&lt;h4 id=&quot;用户体验法则&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/mGjtX1frBiHQoCGVNpDE9g&quot;&gt;用户体验法则&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;设计师在思考和改善用户体验时必须考虑的法则或设计标准的集合。&lt;/p&gt;

&lt;h4 id=&quot;ssh-端口为什么是-22英&quot;&gt;&lt;a href=&quot;https://www.ssh.com/ssh/port&quot;&gt;ssh 端口为什么是 22？(英)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;SSH 的作者回忆，ftp 端口是21，telnet 的端口是23，他就挑了中间剩下的22。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 06 Aug 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/08/06/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/08/06/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.07.30期)</title>
        <description>&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;腾讯开源大规模-nodejs-微服务框架-tarsjs&quot;&gt;&lt;a href=&quot;https://www.oschina.net/news/98304/tencent-opensource-tarsjs&quot;&gt;腾讯开源大规模 Node.js 微服务框架 Tars.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Tars.js 是基于 Tars  体系研发出的， 以便用户在不改变异构系统整体架构的情况下快速搭建（迁移） Node.js 服务，并可非常方便的将原来的单一服务拆分为多个（逻辑）子服务。&lt;/p&gt;

&lt;h4 id=&quot;webpack4-实战-react-和-vue-项目&quot;&gt;&lt;a href=&quot;https://jdc.jd.com/archives/212580&quot;&gt;Webpack4 实战 React 和 Vue 项目&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章详细介绍使用webpack4 搭建React 和 Vue 项目开发环境过程， 讲解了webpack4 中一些主要插件功能和热更新使用。&lt;/p&gt;

&lt;h4 id=&quot;5分钟彻底理解objectkeys&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40601459&quot;&gt;5分钟彻底理解Object.keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这篇文章详细介绍了当Object.keys被调用时内部都发生了什么。&lt;/p&gt;

&lt;h4 id=&quot;如何在nodejs中优化服务器端渲染&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ODVQVsl9m8V9RgYwLbuSrA&quot;&gt;如何在Node.js中优化服务器端渲染？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;服务器端渲染（SSR）是计算密集型的。Node.js 中的用户代码运行在单个线程上，因此可以并发执行计算操作（与 I/O 操作相反），但不能并行执行它们。Node.js 可以并行处理大量的异步 I/O，但在计算方面却受到了限制。随着计算部分所占比例的增加，开始出现 CPU 争用，并发请求将对延迟产生越来越大的影响。&lt;/p&gt;

&lt;h4 id=&quot;聊聊-nodejs-rpc一-协议&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38012481&quot;&gt;聊聊 Node.js RPC（一）— 协议&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文基于Node对 RPC 通讯层协议进行基本的阐述&lt;/p&gt;

&lt;h4 id=&quot;聊聊-nodejs-rpc二-服务发现&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40606909&quot;&gt;聊聊 Node.js RPC（二）— 服务发现&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文基于Node讨论一下 RPC 的服务发现（Service Discovery）&lt;/p&gt;

&lt;h4 id=&quot;深入理解rpc你看或没看见-它都在那里&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40188978&quot;&gt;深入理解RPC——你看或没看见 它都在那里&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;读者应该可以深刻理解 RPC 在互联网企业技术中的重要地位。从技术复杂性角度，也应该可以明白为什么说对 RPC 技术的理解水平是评判一个程序员是不是高级程序员的重要标准之一。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;-携程国际化进程中是怎么做站点多语言处理的&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/JIxeBsTTdO26B0BT0GDx9Q&quot;&gt; 携程国际化进程中，是怎么做站点多语言处理的？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;主要介绍了 携程IBU内容研发团队的内容翻译平台-CTran， 解决了如何合理利用中文系统的资源宝库，为海外用户提供优质的无语言障碍的服务的问题。&lt;/p&gt;

&lt;h4 id=&quot;a-one-year-pwa-retrospective&quot;&gt;&lt;a href=&quot;https://medium.com/@Pinterest_Engineering/a-one-year-pwa-retrospective-f4a2f4129e05&quot;&gt;A one year PWA retrospective&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文分享了一年多来Pinterest在移动端浏览器上使用PWA技术的经验。PWA使得他们的网站有了如同app一样、更好的用户体验，&lt;/p&gt;

&lt;h4 id=&quot;如何回滚一次错误的合并&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40220954&quot;&gt;如何回滚一次错误的合并&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;通过具体场景描述如何完成回滚操作，并介绍 checkout、reset、revert 在撤销概念上的差异。&lt;/p&gt;

&lt;h4 id=&quot;webide在浏览器中写代码的时代即将来临&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651008292&amp;amp;idx=1&amp;amp;sn=9ea83174885b14d39ba75e9cdc60f075&quot;&gt;WebIDE：在浏览器中写代码的时代即将来临？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;去年 12 月，在号称云计算风向标的 AWS re:Invent 大会上，AWS 宣布推出 Cloud9，这是用于编写、运行和调试代码的基于云的 IDE，它可以直接运行在浏览器中，相对于本地的 IDE，可以称它为 WebIDE&lt;/p&gt;

&lt;h4 id=&quot;网易云音乐王诗沐方法论其实没那么重要&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyMDQ5NzI5Mg==&amp;amp;mid=2247497915&amp;amp;idx=1&amp;amp;sn=46c2e72460e26100f35627457be81e7c&quot;&gt;网易云音乐王诗沐：方法论其实没那么重要&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对于一个产品经理来讲，最重要的不是抽象地去学习别人的方法论，而是通过自己的深度思考和用户洞察，不断总结和迭代自己的方法论，不断的形成闭环，这才是真正重要的事情。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;converting-images-to-webp&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/07/converting-images-to-webp/&quot;&gt;Converting Images To WebP&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;介绍将图像转换为 WebP 格式的多种方式。&lt;/p&gt;

&lt;h4 id=&quot;如何利用tensorflowjs部署简单的ai版你画我猜图像识别应用&quot;&gt;&lt;a href=&quot;https://www.jiqizhixin.com/articles/072202&quot;&gt;如何利用TensorFlow.js部署简单的AI版「你画我猜」图像识别应用&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文创建了一个简单的工具来识别手绘图像， 并使用 TensorFlow.js 将其部署到浏览器上运行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 Jul 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/07/30/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/07/30/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.07.23期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;code-review-常见代码问题&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/lovesqcc/p/9271781.html&quot;&gt;Code Review 常见代码问题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;分常见代码问题、可维护性问题、更难发现的错误、较轻微的问题四类，列出在代码审查时需要注意的问题。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;微信小程序的下一步支持npm小程序云可视化编程支持分包&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;amp;mid=2247489190&amp;amp;idx=1&amp;amp;sn=f10a16e2ac08c07c43cbdad76a1f2ec9&quot;&gt;微信小程序的下一步：支持NPM、小程序云、可视化编程、支持分包&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;微信公开课微信小程序技术专场在上海举行，会上，微信公布了面向开发者的技术规划，内容主要包括小程序技术能力与规划、小程序生态体系、小程序性能优化三个方面。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;使用css-grid的九大误区&quot;&gt;&lt;a href=&quot;https://www.w3cplus.com/css/9-biggest-mistakes-with-css-grid.html&quot;&gt;使用CSS Grid的九大误区&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;简单列举使用 CSS Grid 布局易于产生的误区，并给出正确的使用方式。&lt;/p&gt;

&lt;h4 id=&quot;神奇的css3混合模式&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/r-1irFIuYPgCJ5Qqzi1LDQ&quot;&gt;神奇的CSS3混合模式&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文主要探究下 CSS3的混合模式制作的效果， 主要讲下css3 的mix-blend-mode和background-blend-mode两个属性。&lt;/p&gt;

&lt;h4 id=&quot;精读-nestjs-文档&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28621374&quot;&gt;精读 《Nestjs 文档》&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文是对 &lt;a href=&quot;https://docs.nestjs.com&quot;&gt;Nestjs 文档 &lt;/a&gt; 精读的总结， 主要阐述了Nestjs的内容概要 和特性介绍。Nestjs是将 Typescript 与 Nodejs Framework 结合的最好的例子， 也将被长线看好，值的关注。&lt;/p&gt;

&lt;h4 id=&quot;react-router-4x-开发这些雷区我们都帮你踩过了&quot;&gt;&lt;a href=&quot;https://jdc.jd.com/archives/212552&quot;&gt;React Router 4.x 开发，这些雷区我们都帮你踩过了&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章详细总结了在 React 项目中使用 React Router 4.x开发时， 所遇到的问题，在使用能很好的帮助我们排坑。&lt;/p&gt;

&lt;h4 id=&quot;理解-iterator-generator-和-asyncawait&quot;&gt;&lt;a href=&quot;https://github.com/lihongxun945/myblog/issues/3?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;理解 Iterator, Generator 和 Async/Await&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Iterator 是一个循环接口，任何实现了此接口的数据都可以被 for in 循环遍历，Generator 是一个可以暂停和继续执行的函数，他可以完全实现 Iterator 的功能，并且由于可以保存上下文，他非常适合实现简单的状态机。另外通过一些流程控制代码的配合，可以比较容易进行异步操作。Async/Await 就是generator进行异步操作的语法糖。&lt;/p&gt;

&lt;h4 id=&quot;linkedin-lite-a-server-side-rendered-pwa&quot;&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/07/linkedin-lite--a-server-side-rendered-pwa&quot;&gt;LinkedIn Lite: A Server-Side Rendered PWA&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;博客中分享了LinkedIn Lite的架构在轻量级移动网络体验的演变和音响。作为纯服务器端渲染的Web应用程序，它是很快的，但同时也存在一些用户体验方面的问题。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;闲话-cdn&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39028766&quot;&gt;闲话 CDN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文以科普的方式阐述了CDN相关知识，如果想要深入，在文章不少地方都给出了链接，可以进行针对性的深入阅读。&lt;/p&gt;

&lt;h4 id=&quot;graphql-在微服务架构中的实践&quot;&gt;&lt;a href=&quot;https://draveness.me/graphql-microservice&quot;&gt;GraphQL 在微服务架构中的实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章重点分析 GraphQL 在微服务架构中的使用以及在实践过程中遇到的棘手问题，并给出作者心中合理的 GraphQL 微服务架构的设计。&lt;/p&gt;

&lt;h4 id=&quot;mobile-apps-that-run-on-the-desktop&quot;&gt;&lt;a href=&quot;https://feather-apps.com/&quot;&gt;Mobile Apps That Run on the Desktop&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Feather为 Flutter 写了 Windows 和 Mac 的渲染器。也就是说，Flutter 写好的 App 不仅能在手机上跑，还能在桌面跑。理论上，Flutter 能在任何操作系统运行，它是一套独立控件，只要能编译出来，就能运行。&lt;/p&gt;

&lt;h4 id=&quot;普通程序员怎么理解日志系统&quot;&gt;&lt;a href=&quot;http://www.algorithmdog.com/loggingsystem&quot;&gt;普通程序员怎么理解日志系统&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;当我们在做系统开发时，日志系统是绕不开的话题。作为日志系统的最终使用者，我们会接触不同的日志系统。通过日志的输出，可以帮助快速定位问题。那么，我们普通程序员，也就是日志系统最终使用者，可以怎么理解日志系统。&lt;/p&gt;

&lt;h4 id=&quot;hashmap的工作原理&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39186320&quot;&gt;HashMap的工作原理&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我个人很喜欢这个问题，因为这个问题的深度和广度，同时在jdk1.8中，引入了红黑树解决hash碰撞及算法效率&lt;/p&gt;

&lt;h4 id=&quot;为什么能有上百万个goroutines却只能有上千个java线程&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hWF-wPJXKjrCHPvxcMQ5rg&quot;&gt;为什么能有上百万个Goroutines，却只能有上千个Java线程？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;操作系统线程模型与轻量级、用户空间的线程模型之间的转换在不断发生，未来可能还会继续 。对于高度并发的用户场景来说，这是唯一的选择。然而，它具有相当的复杂性。如果 Go 选择采用 OS 线程而不是采用自己的调度器和递增的栈模式的话，那么他们能够在运行时中减少数千行的代码。对于很多用户场景来说，这确实是更好的模型。复杂性可以被语言和库的编写者抽象出去，这样软件工程师就能编写大量并发的程序了。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;如何监控网页的卡顿&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/39292837&quot;&gt;如何监控网页的卡顿？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;FPS 是来自视频或者游戏里的概念，即是每秒的帧数，代表视频或者游戏的流畅度，俗话说，就是“不卡”。通过浏览器的 requestAnimationFrame API获取渲染的频率以达到监控的目的&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/40327490&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 23 Jul 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/07/23/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/07/23/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.07.09期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;前端遇上go-静态资源增量更新的新实践&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/hCqQW1F8FngPPGZAisAWUg&quot;&gt;前端遇上Go: 静态资源增量更新的新实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章讲述了如何用 Go 实现静态资源增量更新的过程，详细介绍了增量更新的性能问题，和 Go 实现的好处。&lt;/p&gt;

&lt;h2 id=&quot;团队分享&quot;&gt;团队分享&lt;/h2&gt;

&lt;h4 id=&quot;如何将-emoji-当成单色-icon-使用&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38767488&quot;&gt;如何将 emoji 当成单色 icon 使用&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;分享一种将 emoji 当成单色 icon 使用的技巧，并简要介绍 Unicode 与 emoji 之间的关系。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;深入理解flutter的编译原理与优化&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/vlHt8jxbdzBqJZDobpsFVw&quot;&gt;深入理解flutter的编译原理与优化&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍 Flutter 相关原理及定制与优化，对 Flutter 从设计，开发构建，到最终运行有一个全局视角的观察。&lt;/p&gt;

&lt;h4 id=&quot;pwa-再进化可以生成一个安卓原生的-webapk-了&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38641098&quot;&gt;PWA 再进化，可以生成一个安卓原生的 WebAPK 了&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在安卓系统上，网络应用安装横幅不仅仅只是将渐进式网络应用（PWA）添加到用户的主屏幕。Chrome 会自动为你的应用生成一个特殊的 APK，有时候我们称之为 WebAPK。&lt;/p&gt;

&lt;h4 id=&quot;揭开js无埋点技术的神秘面纱&quot;&gt;&lt;a href=&quot;https://unclechen.github.io/2018/06/24/%E6%8F%AD%E5%BC%80JS%E6%97%A0%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/&quot;&gt;揭开JS无埋点技术的神秘面纱&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这一两年，不少平台都开始宣传一种叫“无埋点”的技术，下面以Web端为例，揭开它的神秘面纱。&lt;/p&gt;

&lt;h4 id=&quot;条件型-cors-响应下因缺失-vary-origin-导致的缓存错乱问题&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38972475&quot;&gt;条件型 CORS 响应下因缺失 Vary: Origin 导致的缓存错乱问题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作为前端开发工程师，对于 CORS 可能并不陌生，但是对于 Vary: Origin 可能你平时未必有留意。&lt;/p&gt;

&lt;h4 id=&quot;照方抓药---重构-react-组件的实用清单&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/FZhkBJrF62RiIVtuJcgOFg&quot;&gt;照方抓药 - 重构 React 组件的实用清单&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对于 UI 组件，无论是作为一种特殊的 OOP 实现，或是采纳函数式的组合提纯，都需要尽量减少对外部的依赖、排除改变参数或全局变量的副作用，并尽可能拥有唯一的职责。&lt;/p&gt;

&lt;h4 id=&quot;es2018es9的新特性&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38291770&quot;&gt;ES2018（ES9）的新特性&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在这篇文章中，我将介绍ES2018（ES9）的新特性，并介绍如何使用它们。&lt;/p&gt;

&lt;h4 id=&quot;web前端框架是解药还是毒药&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;amp;mid=2247489138&amp;amp;idx=1&amp;amp;sn=8b130c0ed1c972acdb3f9af5286aee08&quot;&gt;Web前端框架：是解药还是毒药？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;框架是为了解决问题而出现的，关键是要懂得合理运用，了解其优势和缺点。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;用nodejs开发一个command-line-interface-cli&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38730825&quot;&gt;用Node.js开发一个Command Line Interface (CLI)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node.js用途很广，常用来开发服务、桌面应用等被开发者熟知，Node.js还有另外一个非常实用的场景 - 命令行应用（后文统称CLI）。本文将介绍CLI的开发流程、常用的功能，并以meet-cli为例实战演练，从零开始一步步开发一个可以在生产中使用（read world）的CLI工具。&lt;/p&gt;

&lt;h4 id=&quot;building-a-snipping-tool-with-electron-react-and-nodejs&quot;&gt;&lt;a href=&quot;https://quantizd.com/building-a-snipping-tool-with-electron-react-and-node-js/&quot;&gt;Building a Snipping Tool with Electron, React and Node.js&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一份很详细的教程，使用 React 、 Electron 以及 Node.js 来完成一个截图工具。&lt;/p&gt;

&lt;h4 id=&quot;一文揭秘自底向上构建知识图谱全过程&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/lBeV6XWzk5bqNGiIMok-zw&quot;&gt;一文揭秘！自底向上构建知识图谱全过程&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;笔者主要想分享一下自底向上构建知识图谱的全过程，为了迅速描述物理世界中的概念及其相互关系，通过将数据粒度从 document 级别降到 data 级别，聚合大量知识，从而实现知识的快速响应和推理。&lt;/p&gt;

&lt;h2 id=&quot;实用工具&quot;&gt;实用工具&lt;/h2&gt;

&lt;h4 id=&quot;giojs基于-threejs-的-web-3d-地球数据可视化的开源组件库&quot;&gt;&lt;a href=&quot;https://github.com/syt123450/giojs/blob/master/README_zh.md&quot;&gt;Gio.js：基于 Three.js 的 web 3D 地球数据可视化的开源组件库&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gio.js 是一个基于 Three.js 的 web 3D 地球数据可视化的开源组件库。使用Gio.js的网页应用开发者，可以快速地以申明的方式创建自定义的Web3D数据可视化模型，添加数据，并且将其作为一个组件整合到自己的应用中&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;别做被小公司毁掉的年轻人&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38842406&quot;&gt;别做被小公司毁掉的年轻人…&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;我们往往高估了短期的改变，而低估了长期的改变。希望无论身处何处，都能够关心自己可以提供的价值，始终不断精进自己的核心技能。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/39294765&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 09 Jul 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/07/09/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/07/09/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.07.02期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;using-googles-flutter-for-truly-cross-platform-mobile-development&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/06/google-flutter-mobile-development/&quot;&gt;Using Google’s Flutter For Truly Cross-Platform Mobile Development&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍了 Flutter 的出现原因，可以解决什么问题，跟现有流行跨平台方案的对比，并展示了如何使用 Flutter 开始创建跨平台移动应用。&lt;/p&gt;

&lt;h2 id=&quot;团队分享&quot;&gt;团队分享&lt;/h2&gt;

&lt;h4 id=&quot;在-web-上使用-javascript-模块&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38581901&quot;&gt;在 web 上使用 JavaScript 模块&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍如何使用 JS 模块，如何进行有效地部署，使用 JS 模块在性能上的权衡，以及未来将如何更好的使用 JS 模块。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;h5同样是返回我们不一样&quot;&gt;&lt;a href=&quot;http://elevenbeans.github.io/2018/06/26/enable-goback-on-h5-popup/&quot;&gt;H5：“同样是返回，我们不一样”&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;“为什么安卓能做到这样的交互效果，你 H5 不可以？”&lt;/p&gt;

&lt;h4 id=&quot;github-stars--usage-react-is-still-blowing-vue-and-angular-away&quot;&gt;&lt;a href=&quot;https://zendev.com/2018/06/19/react-usage-beating-vue-angular.html&quot;&gt;Github Stars !== Usage: React is still blowing Vue and Angular Away&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vue的Git Star已经超过React，但这在使用量上并不一致，React仍是目前使用最多的主流框架，文章提供了各大主流框架的月下载量进行了对比。&lt;/p&gt;

&lt;h4 id=&quot;進階-react-component-patterns-筆記上&quot;&gt;&lt;a href=&quot;https://blog.techbridge.cc/2018/06/27/advanced-react-component-patterns-note/&quot;&gt;進階 React Component Patterns 筆記（上）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对于提供一些可高度定制化的共用元件，使用一些Pattern 绝对是有绝佳的帮助。&lt;/p&gt;

&lt;h4 id=&quot;一个vue页面的内存泄露分析&quot;&gt;&lt;a href=&quot;https://www.yinchengli.com/2018/06/25/vue-memory-leak/?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;一个Vue页面的内存泄露分析&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;前端的内存泄漏对开发者来说一般很难检测因为它们是由一些大量代码中的意外的错误引起的，借助chrome内存堆快照功能可以比较容易的排查内存泄露的问题。&lt;/p&gt;

&lt;h4 id=&quot;前端不止web性能优化---关键渲染路径以及优化策略&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38548289&quot;&gt;前端不止：Web性能优化 - 关键渲染路径以及优化策略&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文将带你去理解什么是浏览器的关键渲染路径以及如何优化关键渲染路径。&lt;/p&gt;

&lt;p&gt;优化关键渲染路径的最终目的是优先显示和用户操作相关的内容，减少低优先级资源对浏览器渲染的阻塞，从而尽早显示用户真正关心的关键内容。页面性能就是用户体验的一个重要维度，尝试用感性的思维去思考理性的代码，也许真的能受益不少。&lt;/p&gt;

&lt;h4 id=&quot;nodejs事件循环-part-1&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38395184&quot;&gt;NodeJS事件循环 Part 1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作为开篇第一章，作者非常详细认真甚至有点啰嗦地介绍了事件循环的基本工作流程，解释了libuv主要解决的问题，同时从应用层JavaScript的角度出发，将事件循环的所有阶段区分为libuv原生的和NodeJS额外添加的（事实也是这样。很多时候我们并不知道需要区分这两者），我觉得有了这些基础，会更加容易理解事件循环的其余部分和细节。不管是新手还是资深NodeJS程序员，这都是一篇不可多得值得一读的文章。&lt;/p&gt;

&lt;h4 id=&quot;gmtc-大前端时代前端监控的最佳实践&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5b35921af265da598f1563cf&quot;&gt;GMTC 大前端时代前端监控的最佳实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文为2018年6月21日，在北京举办的GMTC(全球大前端技术大会)，下午性能与监控专场，由阿里云前端监控团队前端技术专家彭伟春带来的演讲稿。&lt;/p&gt;

&lt;h4 id=&quot;一站到底-前端基础之网络&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5b3357556fb9a00e5a4b63df&quot;&gt;一站到底 —前端基础之网络&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;网络相关的知识是每个前端工程师都应该具备的。很多从事前端的朋友们都没系统学习过计算机网络和http相关内容。在没有建立一个整体的知识体系下，会有一种一站到底答题的感觉，每个知识点都大致知道问题的答案，但总不确定，更不知道具体是怎么回事。本文系统的梳理了与前端密切相关的网络知识。&lt;/p&gt;

&lt;h4 id=&quot;chrome-将默认屏蔽非用户行为触发的父页面跳转&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38538801&quot;&gt;Chrome 将默认屏蔽“非用户行为触发”的父页面跳转&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍了 top.location = 的正面使用场景，以及 Chrome 在区分用户行为和恶意跳转上的尝试，最新版本将默认阻止非用户行为跳转。&lt;/p&gt;

&lt;h4 id=&quot;webpack-4-配置最佳实践&quot;&gt;&lt;a href=&quot;https://github.com/ProtoTeam/blog/blob/master/201806/3.md&quot;&gt;Webpack 4 配置最佳实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文主要介绍的就是 Webpack 配置最佳实践在 Webpack 3.x 和 4.x 背景下的异同， 对了解Webpack 4 项目的配置文件组织有所帮助。&lt;/p&gt;

&lt;h4 id=&quot;es6-的解构赋值前每次都创建一个对象吗会加重-gc-的负担吗&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/cZsyuo9nq4AdXQtmckuFMQ&quot;&gt;ES6 的解构赋值前每次都创建一个对象吗？会加重 GC 的负担吗？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文从较底层的角度分析了ES6 的解构赋值前是否每次会创建对象以及是否会加重GC负担的问题。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;聊聊代码整洁之道&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015098729&quot;&gt;聊聊代码整洁之道&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;普通的工程师堆砌代码，优秀的工程师优雅代码，卓越的工程师简化代码。如何写出优雅整洁易懂的代码是一门学问，也是软件工程实践里重要的一环。笔者推荐三本经典的书籍《代码整洁之道 》、《编写可读代码的艺术》、《重构:改善既有代码的设计》，下文重点将从注释、命名、方法、异常、单元测试等多个方面总结了一些代码整洁最佳实践。&lt;/p&gt;

&lt;h4 id=&quot;闲话高并发的那些神话看京东架构师如何把它拉下神坛&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/FLpdT9wZFT0sJBmNTCIObw&quot;&gt;闲话高并发的那些神话，看京东架构师如何把它拉下神坛&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文阐述了 高并发问题的产生和影响因素， 以及在技术手段上的解决方案。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/38448399&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/07/02/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/07/02/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.06.25期)</title>
        <description>&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;v8-改进垃圾清理机制&quot;&gt;&lt;a href=&quot;https://v8project.blogspot.com/2018/06/concurrent-marking.html&quot;&gt;V8 改进垃圾清理机制&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;V8 引擎宣布”垃圾清理机制”的重大改进。我们知道，对于大型程序，垃圾清理很影响性能，因为程序必须暂停，让引擎识别哪些内存不再需要。V8 现在允许内存识别不暂停程序，而是并发进行，使得程序停顿时间减少70%左右。引擎如何识别不再需要的对象，希望了解具体实现的朋友，可以看看上面这篇文章。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;react-native-at-airbnb&quot;&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c&quot;&gt;React Native at Airbnb&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Airbnb 团队用了一系列文章来阐述使用 React Native 的经验，这是第一篇。分别介绍使用 RN 的缘由，RN 在技术上的优劣，团队管理上的挑战，为什么要放弃 RN，以及未来移动开发的新方向。&lt;/p&gt;

&lt;h4 id=&quot;javascript-如何实现-gpu-加速&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/wanbo/p/9100962.html&quot;&gt;Javascript 如何实现 GPU 加速&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;使用 webgl API 来实现通用计算，以此达到 GPU 加速的效果。&lt;/p&gt;

&lt;h4 id=&quot;using-javascript-modules-on-the-web-&quot;&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/modules&quot;&gt;Using JavaScript Modules on the Web &lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一份在 web 使用 ES Modules 的指南，同时，Chrome 团队正在努力一些问题来更好地使用 ESM。&lt;/p&gt;

&lt;h4 id=&quot;使用eslint--prettier美化vue代码&quot;&gt;&lt;a href=&quot;https://nice.lovejade.cn/zh/article/beautify-vue-by-eslint-and-prettier.html&quot;&gt;使用ESLint ＆ Prettier美化Vue代码&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文主要介绍了 Prettier &amp;amp;  ESLint  如何打造编写高质量代码的开发规范。&lt;/p&gt;

&lt;h4 id=&quot;函数防抖与函数节流&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38313717&quot;&gt;函数防抖与函数节流&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章阐述了 函数防抖与函数节流 的概念，以及它们实现的方法和使用场景。&lt;/p&gt;

&lt;h4 id=&quot;image-inconsistencies-how-and-when-browsers-download-images&quot;&gt;&lt;a href=&quot;https://csswizardry.com/2018/06/image-inconsistencies-how-and-when-browsers-download-images/&quot;&gt;Image Inconsistencies: How and When Browsers Download Images&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Firefox and Safari seem to have the most preferred behaviour here: they won’t download background-images that they know they won’t need. Chrome, Opera, and Edge will all download background-images that are applied to invisible elements.&lt;/p&gt;

&lt;h4 id=&quot;css3-animation属性中的steps功能符深入介绍&quot;&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2018/06/css3-animation-steps-step-start-end/&quot;&gt;CSS3 animation属性中的steps功能符深入介绍&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;steps()功能符和CSS3 animation中的cubic-bezier()功能符的地位和作用是一样的，都可以作为animation-timing-function的属性值。只不过steps()更像是楼梯坡道，cubic-bezier()更像是无障碍坡道&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;prerender-loader&quot;&gt;&lt;a href=&quot;https://github.com/GoogleChromeLabs/prerender-loader&quot;&gt;prerender-loader&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;用于webpack的prerender-loader插件，插件实现预渲染功能，预渲染功能类似SSR，在编译时候输出有效的静态html而不是一个空白的启动页。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;从-ipv4-到-ipv6阿里踩过哪些坑&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38366843&quot;&gt;从 IPv4 到 IPv6，阿里踩过哪些坑？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在IPv6的概念出现后多年，市场反应不瘟不火。如今，随着万物互联和云计算的爆发式增长，下一代互联网IPv6时代真的已经到来了。6月20日，阿里云在北京召开了阿里云全面支持IPv6发布会，中国网络界群贤毕至。阿里云为什么要发布IPv6？阿里巴巴在IPv4向IPv6的演进上都走过哪些坑？本文将一一为你解读。&lt;/p&gt;

&lt;h4 id=&quot;聊聊-nodejs-rpc一&quot;&gt;&lt;a href=&quot;https://yuque.com/egg/nodejs/dklip5&quot;&gt;聊聊 Nodejs RPC（一）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本篇博客中主要讲解了RPC的原理 以及 Nodejs 如何实现 RPC 通讯协议, 从而使Nodejs 和其他的互通。&lt;/p&gt;

&lt;h4 id=&quot;基于-docker-打造前端持续集成开发环境&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37961402&quot;&gt;基于 Docker 打造前端持续集成开发环境&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;前端工程师首先得是工程师，那么合格的工程师应该对工程的整个生命周期，包括对自己写出来的代码最终如何被用户访问，以及如何产生价值的整个过程都有较好的理解。&lt;/p&gt;

&lt;h4 id=&quot;结合源码分析-nodejs-模块加载与运行原理&quot;&gt;&lt;a href=&quot;http://efe.baidu.com/blog/nodejs-module-analyze/&quot;&gt;结合源码分析 Node.js 模块加载与运行原理&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在 Node.js 中使用模块非常简单，我们日常开发中几乎都有过这样的经历：写一段 JavaScript 代码，require 一些想要的包，然后将代码产物 exports 导出。但是，对于 Node.js 模块化背后的加载与运行原理，我们是否清楚呢。
本篇文章，就会结合 Node.js 源码，探究一下以上这些问题背后的答案。&lt;/p&gt;

&lt;h4 id=&quot;threads-in-node-1050-a-practical-intro&quot;&gt;&lt;a href=&quot;https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953&quot;&gt;Threads in Node 10.5.0: a practical intro&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;why would we need threads in Node? 
The quick and simple answer is: to have it excel in the only area where Node has suffered in the past: dealing with heavy CPU intensive computations. This is mainly why Node.js is not strong in areas such as AI, Machine Learning, Data Science and similar. There are a lot of efforts in progress to solve that, but we’re still not as performant as when deploying microservices for instance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/38448399&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 25 Jun 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/06/25/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/06/25/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.06.18期)</title>
        <description>&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;state-of-react-native-2018&quot;&gt;&lt;a href=&quot;http://facebook.github.io/react-native/blog/&quot;&gt;State of React Native 2018&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;React Native 官方博客上宣布他们将要重构 React Native，使其更轻量，更适应 JavaScript 生态圈的发展。&lt;/p&gt;

&lt;h4 id=&quot;design-mistakes-in-nodenode-之父-ryan-dahl-演讲-ppt-中文版-2018-js-conf-berlin&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37637923&quot;&gt;《Design Mistakes in Node》Node 之父 Ryan Dahl 演讲 PPT 中文版 (2018 JS Conf Berlin)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文是 Node 之父 Ryan Dahl 在 2018 JS Conf Berlin上的演讲《Design Mistakes in Node》的完整中文翻译，如果你对 Node 和 Deno 项目感兴趣，那我强烈建议你阅读完本文章 。&lt;/p&gt;

&lt;p&gt;姊妹篇：&lt;a href=&quot;https://mp.weixin.qq.com/s/7XAiYw18c8YZc-fXk0-wrw&quot;&gt;Node之父ry：Node中的设计错误&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;react-v163之后的组件生命周期函数&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38030418&quot;&gt;React v16.3之后的组件生命周期函数&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;聊聊 React v16.3 中组件生命周期函数的变化，体现施加约束的哲学指导思想，从框架层面来规范开发模式。&lt;/p&gt;

&lt;h4 id=&quot;react优化-记忆化技术-使用闭包提升你的react性能&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015301672&quot;&gt;React优化-记忆化技术-使用闭包提升你的React性能&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;使用React开发的时候，我们请求服务器拿回来一个复杂的数据，我们在render里去处理这个数据，但是state和props频繁修改会触发render，每次触发render，数据都要去处理一次，每次处理都是对性能的损耗。
使用记忆化技术，每次调用函数把你的传参和结果记录下来，遇到相同的传参，就直接返回记录缓存的结果，不用再去调用函数处理数&lt;/p&gt;

&lt;h4 id=&quot;前端开发-领域驱动设计&quot;&gt;&lt;a href=&quot;https://github.com/ProtoTeam/blog/blob/master/201806/2.md&quot;&gt;前端开发-领域驱动设计&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文会尝试分析项目复杂度的失控的问题， 以及从前端如何应用领域模型开发的角度给出一些建议。&lt;/p&gt;

&lt;h4 id=&quot;盒子端-css-动画性能提升研究&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/buywVtqnFXxyy4v40F7yKw&quot;&gt;盒子端 CSS 动画性能提升研究&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文归纳总结了盒子端 CSS 动画的性能影响因素以及优化动画的步骤。&lt;/p&gt;

&lt;h4 id=&quot;the-new-and-old-css-units-youve-never-heard-about&quot;&gt;&lt;a href=&quot;https://dev.to/maxart2501/the-new-and-old-css-units-youve-never-heard-about-1mn1&quot;&gt;The new (and old) CSS units you’ve never heard about&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;你可能没有听说过的css单位，这些罕见的单位涵盖了长度，角度，比例，频率&lt;/p&gt;

&lt;h4 id=&quot;如何管理好10万行代码的前端单页面应用&quot;&gt;&lt;a href=&quot;https://juejin.im/post/59cb0d0b5188257e876a2d27&quot;&gt;如何管理好10万行代码的前端单页面应用&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;随着产品不断完善，代码越来越多，如何管理上万行代码，本文从架构方案针对这一问题进行了讨论。&lt;/p&gt;

&lt;h4 id=&quot;爬虫攻防之前端策略简析&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/kGh0MfOh7XfzmYCnkD7_xg&quot;&gt;爬虫攻防之前端策略简析&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章里介绍了几个大的网站，在反爬虫过程中，采取的各式各样的策略，无不体现出前端工程师的奇葩脑洞。&lt;/p&gt;

&lt;h4 id=&quot;javascript-性能优化技巧分享&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/XgOu3gqkKaFQzu8dLyWbng&quot;&gt;JavaScript 性能优化技巧分享&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文从加载、上下文、解析、编译、执行和捆绑等多个方面来讲解 JavaScript 的性能优化技巧，以便让更多的前端开发人员掌握这方面知识。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;keeping-nodejs-fast-tools-techniques-and-tips-for-making-high-performance-nodejs-servers&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/06/nodejs-tools-techniques-performance-servers/&quot;&gt;Keeping Node.js Fast: Tools, Techniques, And Tips For Making High-Performance Node.js Servers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node常用于作HTTP服务来提供API或其他web服务。如何用工具在 node.js 中，编写了快速 HTTP/1.1 基准测试&lt;/p&gt;

&lt;h4 id=&quot;webassembly-现状与实战&quot;&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/web/wa-lo-webassembly-status-and-reality/index.html&quot;&gt;WebAssembly 现状与实战&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍 WebAssembly 的出现原因和原理，并包含一个简单的实例，还展望其未来的使用场景。&lt;/p&gt;

&lt;h4 id=&quot;深度解析tengine的调试与资源监控方法论&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37997230&quot;&gt;深度解析Tengine的调试与资源监控方法论&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文由阿里云CDN团队的研发同学笑臣和墨飏带来，从Tengine的内存调试、核心结构、upstream、coredump四个部分展开，为大家整理和分享一些实践经验。&lt;/p&gt;

&lt;h4 id=&quot;utc-is-enough-for-everyoneright&quot;&gt;&lt;a href=&quot;https://zachholman.com/talk/utc-is-enough-for-everyone-right&quot;&gt;UTC Is Enough for Everyone…Right?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;关于时间和时区，文章进行非常棒的描述。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端 sense 写前端，现在想多点产品 sense 写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 18 Jun 2018 20:23:23 +0800</pubDate>
        <link>http://else.vip//weekly/2018/06/18/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/06/18/weekly.html</guid>
        
        
        <category>Weekly</category>
        
      </item>
    
  </channel>
</rss>
