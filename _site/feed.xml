<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELSE</title>
    <description>坐标上海，专注前端，基于Node全栈开发，欢迎加入我们.
</description>
    <link>http://else.vip//</link>
    <atom:link href="http://else.vip//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 May 2018 22:42:19 +0800</pubDate>
    <lastBuildDate>Mon, 28 May 2018 22:42:19 +0800</lastBuildDate>
    <generator>Jekyll v3.8.2</generator>
    
      <item>
        <title>ELSE 技术周刊(2018.05.28期)</title>
        <description>&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;google力推的那些前端技术最近都有哪些进展&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/-hYSPI67M_R7Gcff37oiyA&quot;&gt;Google力推的那些前端技术，最近都有哪些进展？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Google I/O 2018 已于上周落下帷幕，普通民众看的是新产品，开发者们关注的是新技术。透过这次大会，我们不难发现，Google 已经从 mobile first 转向 AI first，AI 之后，就是移动和前端技术了，移动无非是 Android P 和 Flutter 等，前端涵盖的技术从 Web 框架到 Web 工具，包括 Angular、PWA、polymer、AMP 等，下面让我来为大家捋一捋 Google 力推的这些前端技术最近都有哪些进展。&lt;/p&gt;

&lt;h4 id=&quot;web-push-notifications-demo&quot;&gt;&lt;a href=&quot;https://webpushdemo.azurewebsites.net/&quot;&gt;Web Push Notifications demo&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Microsoft Edge 已经支持通过 Push API 进行网络推送通知，Edge 团队对相关概念作了详尽的介绍，并一步步完成一个示例。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;从chrome源码看websocket&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37350346&quot;&gt;从Chrome源码看WebSocket&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本篇主要讨论了WebSocket存在的意义，给浏览器开放一个socket的API，并进行标准化，除了浏览器，APP等也都可以按照这个标准实现，弥补了HTTP单向传输的缺点。还讨论了WebSocket报文帧的格式，以及怎么用Node.js读取这个报文帧，客户端会把它发送的内容进行掩码处理，服务端收到的也需要进行掩码还原。&lt;/p&gt;

&lt;h4 id=&quot;页面可视化搭建工具前生今世&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pcUbnYyVHSebOelDlHA27g&quot;&gt;页面可视化搭建工具前生今世&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;页面可视化工具让开发人员从无穷无尽的活动页中解放出来。&lt;/p&gt;

&lt;h4 id=&quot;react-16-加载性能优化指南&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KxJttCVuCoIrm9RAjRBrdg&quot;&gt;React 16 加载性能优化指南&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;随着 React 16 和 Webpack 4.0 的发布，很多过去的优化手段其实都或多或少有些“过时”了,这篇文章对新的优化方案做了总结。&lt;/p&gt;

&lt;h4 id=&quot;react-fiber架构&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37095662&quot;&gt;React Fiber架构&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;React16启用了全新的架构，叫做Fiber，其最大的使命是解决大型React项目的性能问题，再顺手解决之前的一些痛点。&lt;/p&gt;

&lt;h4 id=&quot;nodejs-流stream你需要知道的一切&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36728655&quot;&gt;Node.js 流（stream）：你需要知道的一切&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章简述了 Node.js 中 Stream 模块， 介绍了其四种基本的流类型和一些处理流的API， 简单地实现了流的操作。&lt;/p&gt;

&lt;h4 id=&quot;css3d的魅力&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/1wen/p/9064011.html&quot;&gt;css3D的魅力&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一起体验下 CSS 3D的魅力吧，主要是 css属性中 transform-style，transform-origin，transform, perspective的运用。&lt;/p&gt;

&lt;h4 id=&quot;看图学-https&quot;&gt;&lt;a href=&quot;http://blog.liuxuan.site/2018/05/21/learn_https_through_photos/&quot;&gt;看图学 HTTPS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;通过图形生动介绍 HTTPS 的基本工作原理。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;md4md5sha1hmachmac_sha1区别&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/30jzMVnSya-S9ZJa5juceQ&quot;&gt;MD4、MD5、SHA1、HMAC、HMAC_SHA1区别&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;总结了几种常见的加密算法，了解下它们都有哪些不同。&lt;/p&gt;

&lt;h4 id=&quot;如何用-c-语言画小猪佩奇&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37031514&quot;&gt;如何用 C 语言画小猪佩奇&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;使用 C 语言利用 ASCII 字符完成精致的猪猪女孩。&lt;/p&gt;

&lt;h4 id=&quot;indexeddb-打造靠谱-web-离线数据库&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014950564&quot;&gt;IndexedDB 打造靠谱 Web 离线数据库&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;IndexedDB 目前在前端慢慢得到普及和应用。它正朝着前端离线数据库技术的步伐前进。以前一开始是 manifest、localStorage、cookie 再到 webSQL，现在 IndexedDB 逐渐被各大浏览器认可。我们也可以针对它来进行技术上创新的开发。比如，现在小视频非常流行，那么我们可以在用户观看时，通过 cacheStorage 缓存，然后利用 WebRTC 技术实现 P2P 分发的控制。&lt;/p&gt;

&lt;h4 id=&quot;使用nginx缓存服务器上的静态文件&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5af38e0c518825670c45ef6e&quot;&gt;使用nginx缓存服务器上的静态文件&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文详细介绍使用nignx作为静态文件缓存服务器的配置，非常实用。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;一个程序员的成长之路---剖析别人总结自己&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NTY0MTY1OQ==&amp;amp;mid=2654510955&amp;amp;idx=1&amp;amp;sn=7ce6bacde78e787f01ee0143c2002999&quot;&gt;一个程序员的成长之路 - 剖析别人，总结自己&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;张云龙在中国前端开发者千人峰会上的主题分享，分享了他的个人成长之路，以及程序员的中年危机，相信能给大家在前端职业规划上一些参考和启发。&lt;/p&gt;

&lt;h4 id=&quot;breaking-a-myth-data-shows-you-dont-actually-need-a-co-founder&quot;&gt;&lt;a href=&quot;https://techcrunch.com/2016/08/26/co-founders-optional/&quot;&gt;Breaking a myth: Data shows you don’t actually need a co-founder&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个人也可以创业，无数文章告诉你，创业需要一个团队，你需要找联合创始人。但是，不一定非如此不可，数据表明没有联合创始人也是可以的。&lt;/p&gt;

&lt;p&gt;我查了 CrunchBase API 里面的 7,348家公司，每家公司募集了超过1000万美元。几乎一半的公司只有一个创始人，不到三分之一的公司有两位创始人，只有22％的公司有三位或更多的创始人。创始人的平均数量是 1.85。&lt;/p&gt;

&lt;p&gt;我又查了成功退出的公司的数据，这次包括筹集不到1000万美元的公司。这组数据包括6,191家公司，但独立创始人的优势更明显。超过一半的公司是由独立创始人创立的。只有三分之一有两位创始人，约18％有三位或更多的创始人。创始人的平均数量是1.72。&lt;/p&gt;

&lt;h4 id=&quot;在ibm学到的东西到底对我的程序生涯产生了多大的影响&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015035771&quot;&gt;在IBM学到的东西，到底对我的程序生涯产生了多大的影响&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;通读本文，你会明白程序员和工程师之间的微妙差异。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 21 May 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/05/21/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/05/21/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.05.21期)</title>
        <description>&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;webassembly-对比-javascript-及其使用场景&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/EnioY-rR-qdreNuQW9ewkw&quot;&gt;WebAssembly 对比 JavaScript 及其使用场景&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章剖析 WebAssembly 的工作原理，和 JavaScript 在性能方面的进行了比对， 如 加载时间，执行速度，垃圾回收，内存使用，平台 API 访问，调试，多线程以及可移植性， 并且介绍了 一些WebAssembly 使用场景。&lt;/p&gt;

&lt;h4 id=&quot;css中最全的换行处理方式&quot;&gt;&lt;a href=&quot;https://www.w3cplus.com/css/where-lines-break-is-complicated-heres-all-the-related-css-and-html.html&quot;&gt;CSS中最全的换行处理方式&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章主要简单的介绍了CSS中几个处理超常文本溢出容器的处理方式。&lt;/p&gt;

&lt;h4 id=&quot;node-在有赞的实践&quot;&gt;&lt;a href=&quot;https://tech.youzan.com/youzan-node/&quot;&gt;Node 在有赞的实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;关于有赞最近一年在 Node 这一块的实践经验，从 Node 基础框架的迭代与演进，到接入服务化体系的历程。&lt;/p&gt;

&lt;h4 id=&quot;web-前端中的增强现实ar开发技术&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014891945&quot;&gt;Web 前端中的增强现实（AR）开发技术&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;增强现实（以下简称 AR）浪潮正滚滚而来，Web 浏览器作为人们最唾手可得的人机交互终端，正在大力发展 AR 技术。很多 Web 前端工程师也在寻求职业转型，于是我把我近半年的相关调研结果在此汇结成文。本文力求把目前前端方向的 AR 技术都罗列一遍，细节不赘述（保证文章篇幅不过长），只做概括和科普（因此文章中的链接很多），零零散散写了一个多月，欢迎已经在从事该领域或研究的道友前来纠正补充。&lt;/p&gt;

&lt;h4 id=&quot;重构---设计api的扩展机制&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014751582&quot;&gt;重构 - 设计API的扩展机制&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本篇详细的说下项目中的一个重构场景–给API设计扩展机制。目的就是为了方便以后能灵活应对需求的改变。当然了，是否需要设计扩展性这个要看API的需求。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;四个架构设计案例分析及其背后的架构师思维&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651007363&amp;amp;idx=1&amp;amp;sn=b9c7c2712c4436f33d7ba8b339bc0a8b&quot;&gt;四个架构设计案例分析及其背后的架构师思维&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在前续文章 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&amp;amp;mid=2247484527&amp;amp;idx=2&amp;amp;sn=252d8b5bd0330036de8493739191d472&amp;amp;scene=21&quot;&gt;《优秀架构师必须掌握的架构思维》&lt;/a&gt;，介绍了抽象、分层、分治和演化这四种应对复杂性的基本武器。本篇通过四个案例，讲解如何综合运用这些武器，分别对小型系统、中型系统、基础架构以及组织技术体系进行架构和设计。&lt;/p&gt;

&lt;h4 id=&quot;the-front-end-tooling-survey-2018---results&quot;&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results&quot;&gt;The Front-End Tooling Survey 2018 - Results&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;超过 5000 名开发人员参加了这项调查，这里就是调查结果，关于现在使用哪些工具和技术，有助于深入了解前端工具的当前趋势。&lt;/p&gt;

&lt;h4 id=&quot;前端工程师的技术进阶点在哪里&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMTU0NTc4Nw==&amp;amp;mid=2661157671&amp;amp;idx=1&amp;amp;sn=b400eb2ad196fc1ac97bbdbe92ceebe2&quot;&gt;前端工程师的技术进阶点在哪里?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;单纯讲技术进阶点意义不大，脱离场景都是耍流氓。前端不该只写页面，node也只是基本技能，最重要的一点，技术要驱动商业，否则没有任何价值。你是一个工程师，征途是星辰大海，何苦给自己设限？&lt;/p&gt;

&lt;h4 id=&quot;the-front-end-tooling-survey-2018---results-1&quot;&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results&quot;&gt;The Front-End Tooling Survey 2018 - Results&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;今年的前端工具调查。通过图表可清晰反应前端从业在在工具链上的选择及走势。该调查主要聚焦在CSS周边工具链及JavaScript模块规范，测试，打包。&lt;/p&gt;

&lt;h4 id=&quot;第1277期google-io-2018--web-系列参会笔记&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&amp;amp;mid=2247483987&amp;amp;idx=1&amp;amp;sn=fa6c11a9bd5735403f8ef8453e7a3c67&amp;amp;chksm=fa70a0bbcd0729ada3df3e65d73d75b30748e14871f3051045e35be5c6187cdc8e5eaa6a1245&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0520EyPDxuBJpdmsQZYoKxwo#rd&quot;&gt;【第1277期】Google I/O 2018 —— Web 系列参会笔记&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;2018年5月10日，又一届GoogleI/O 落下帷幕。似乎每一届 I/O 都有非常惊艳的产品，今年也不例外，相信 Google Assistant 打电话预约的演示给大家留下了很深刻的印象。让人不禁惊叹“未来已来”。AI 之外，Google在Web 技术上也带来了多项优化 Web 用户体验和开发体验的新成果。笔者在现场参加了大部分与 Web 相关的演讲，在此对 Web 的内容亮点进行了总结，并说说自己的想法。&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;如何阅读大型前端开源项目的源码&quot;&gt;&lt;a href=&quot;https://github.com/ProtoTeam/blog/blob/master/201805/3.md&quot;&gt;如何阅读大型前端开源项目的源码&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章主要讲的是阅读大型的前端开源项目比如 React、Vue、Webpack、Babel 的源码时的一些技巧，目的是让大家在遇到需要阅读源码才能解决的问题时，可以更快的定位到自己想看的代码。&lt;/p&gt;

&lt;h4 id=&quot;guessjsgoogle的数据驱动改进前端体验的工具库&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/MI9U90TrHhE_esDicCXKjg&quot;&gt;Guess.js：Google的数据驱动改进前端体验的工具库&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Guess.js 是在 Web 上用于实现数据驱动提升用户体验的库和工具的集合。主要用于探索以下方面的数据分析驱动在用户体验中的应用：单页应用程序，基于框架的静态网站，静态内容网站，企业网站&lt;/p&gt;

&lt;h4 id=&quot;how-you-can-start-contributing-to-nodejs-today&quot;&gt;&lt;a href=&quot;https://nodesource.com/blog/how-you-can-start-contributing-to-node-js-today&quot;&gt;How You Can Start Contributing to Node.js Today&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Whether you’re interested in contributing to the Node.js project in a technical or non-technical way, there’s going to be something here for you!&lt;/p&gt;

&lt;h4 id=&quot;wireshark对https数据的解密&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36669377&quot;&gt;Wireshark对HTTPS数据的解密&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;之前有介绍《以TCP/IP协议为例，如何通过wireshark抓包分析？》，那如果是HTTPS协议，可以抓包分析吗？基于好奇，查阅了下相关资料分享给大家。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 21 May 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/05/21/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/05/21/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.05.14期)</title>
        <description>&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;google-io-2018--web-现状综述&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5af2a6e1f265da0b9c109f8a&quot;&gt;Google I/O 2018 : Web 现状综述&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不得不承认，PWA已经来了，WebAssembly使得用C/C++编写网页程序成为可能，无论PC还是H5，未来web浏览器会越来越强大，作为前端开发唯有不停地学习才能跟上时代的步伐。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;the-react-state-museum&quot;&gt;&lt;a href=&quot;https://hackernoon.com/the-react-state-museum-a278c726315&quot;&gt;The React State Museum&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;总结对比在 React 状态管理方面的各种解决方案的差异性和使用场景。&lt;/p&gt;

&lt;h4 id=&quot;尾递归为啥能优化&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36587160&quot;&gt;尾递归为啥能优化？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章主要讨论了介绍尾递归为什么可以优化，以及怎么在代码层面进行优化尾递归，通过这番探讨我想可以加深自己对尾递归以及函数栈理解。&lt;/p&gt;

&lt;h4 id=&quot;async-await-是把双刃剑&quot;&gt;&lt;a href=&quot;https://github.com/dt-fe/weekly/blob/master/55.%E7%B2%BE%E8%AF%BB%E3%80%8Aasync%20await%20%E6%98%AF%E6%8A%8A%E5%8F%8C%E5%88%83%E5%89%91%E3%80%8B.md&quot;&gt;async await 是把双刃剑&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文更多是吐槽了async/await 带来的糟糕一面，既然是把双刃剑， 就让我们了解下它有那些不好的一面，从而使用它有利的一面。&lt;/p&gt;

&lt;h4 id=&quot;现代浏览器支持的不同类型的观察者&quot;&gt;&lt;a href=&quot;https://www.w3cplus.com/javascript/different-types-of-observers-supported-by-modern-browsers.html&quot;&gt;现代浏览器支持的不同类型的观察者&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;当前主流浏览器常用的几个Observer：Intersection Observer，Mutation Observer，Resize Observer，Performance Observer及其运用场景&lt;/p&gt;

&lt;h4 id=&quot;new-css-features-that-are-changing-web-design&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/05/future-of-web-design/&quot;&gt;New CSS Features That Are Changing Web Design&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍了 CSS 的一些新特性，包含 Grid 布局，自定义属性，css shapes 以及 CSS writing-mode等，结合这些新技术可以使设计师能够以全新的方式发挥创意。&lt;/p&gt;

&lt;h4 id=&quot;javascript-中错误正确处理方式你用对了吗&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/zjME9Q4bjNCc9DpDsuGrLA&quot;&gt;JavaScript 中错误正确处理方式，你用对了吗？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文将会讨论客户端JavaScript中的错误处理。主要介绍JavaScript中的易犯错误、错误处理、异步代码编写等内容。&lt;/p&gt;

&lt;h4 id=&quot;here-are-examples-of-everything-new-in-ecmascript-2016-2017-and-2018&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/here-are-examples-of-everything-new-in-ecmascript-2016-2017-and-2018-d52fa3b5a70e&quot;&gt;Here are examples of everything new in ECMAScript 2016, 2017, and 2018&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This article will cover all 18 features that are listed in the TC39’s finished proposals that were added in ES2016, ES2017, and ES2018 (final draft) and show them with useful examples.&lt;/p&gt;

&lt;h4 id=&quot;nodejs-best-practice-exception-handling&quot;&gt;&lt;a href=&quot;http://www.nodejsrecipes.com/recipes/7310521/node-js-best-practice-exception-handling&quot;&gt;Node.js Best Practice Exception Handling&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如何优雅地处理Node.js异常。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;腾讯大家小程序开发总结&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Zr2t_25SfozHtvVVwBk26w&quot;&gt;《腾讯大家》小程序开发总结&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从一个真实的项目详细介绍在开发微信小程序值得注意的点。&lt;/p&gt;

&lt;h4 id=&quot;微信小游戏开发总结&quot;&gt;&lt;a href=&quot;https://futu.im/posts/2018-04-13-wx-game/&quot;&gt;微信小游戏开发总结&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;小游戏是小程序的一个类目，小游戏是微信开放给小程序的更多的能力，让小程序开发者有了开发游戏的能力。小游戏没有WXSS、WXML、多页面等内容，但加了一些渲染、文件系统以及后台多线程的功能。&lt;/p&gt;

&lt;h4 id=&quot;rethinking-web-performance-with-service-workers&quot;&gt;&lt;a href=&quot;https://medium.baqend.com/the-technology-behind-fast-websites-2638196fa60a&quot;&gt;Rethinking Web Performance with Service Workers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This article surveys the current state of the art in page speed optimization through Service Worker technology. It contains the gist of more than 30 man-years of research that went into Speed Kit, an easy-to-use web performance plugin to accelerate websites.&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;
&lt;h4 id=&quot;gcoord&quot;&gt;&lt;a href=&quot;https://github.com/hujiulong/gcoord?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;gcoord&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个处理地理坐标系的js库，用来修正百度地图、高德地图及其它互联网地图坐标系不统一的问题&lt;/p&gt;

&lt;h4 id=&quot;intellij-idea神器居然还有这些小技巧&quot;&gt;&lt;a href=&quot;https://my.oschina.net/samgege/blog/1808622&quot;&gt;Intellij IDEA神器居然还有这些小技巧&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;作者分享了一些好用的Intellij IDEA技巧， 让你写代码时 有行云流水般的赶脚。&lt;/p&gt;

&lt;h4 id=&quot;chrome开发者工具各种技巧&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5af53823f265da0b75282b0f&quot;&gt;chrome开发者工具各种技巧&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文推荐的十多个chrome使用方法，每一个前端开发都应熟练掌握&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/36816123&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 14 May 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/05/14/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/05/14/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.05.07期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;creating-a-real-world-cli-app-with-node&quot;&gt;&lt;a href=&quot;https://timber.io/blog/creating-a-real-world-cli-app-with-node/&quot;&gt;Creating A Real-World CLI App With Node&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一篇详细的教程，如何基于 Node 完成一个 CLI 工具。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;version-6-of-angular-now-available&quot;&gt;&lt;a href=&quot;https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4&quot;&gt;Version 6 of Angular Now Available&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Angular 日前发布6.0.0版本。该版本更多的聚焦在工具链及相关周边。&lt;/p&gt;

&lt;h4 id=&quot;whats-new-in-microsoft-edge-in-the-windows-10-april-2018-update&quot;&gt;&lt;a href=&quot;https://blogs.windows.com/msedgedev/2018/04/30/edgehtml-17-april-2018-update/&quot;&gt;What’s new in Microsoft Edge in the Windows 10 April 2018 Update&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Edge浏览器更新了一大波新功能，其中包含对PWA一些功能的支持。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;不只有-android-pgoogle-io-开发者大会前瞻&quot;&gt;&lt;a href=&quot;https://juejin.im/entry/5aec1f4d6fb9a07ac90d137d&quot;&gt;不只有 Android P，Google I/O 开发者大会前瞻&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一年一度的 Google I/O 开发者大会将于 5 月 8 号到 5 月 10 号在美国加州山景城海岸线圆形剧场举行。在去年的 I/O 会议上，谷歌带来了 Android Oreo 系统、基于 AR 技术的 Google Lens、iOS 版 Google Assitsant、Google Photo 等新功能。&lt;br /&gt;
那么今年的 Google I/O 开发者大会上，又有哪些新功能值得我们期待呢？&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;我从小程序学到了什么&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36203122&quot;&gt;我从小程序学到了什么&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章从技术角度来看小程序对于 Hybrid 开发模式的优化过程值得学习借鉴的地方，比如多个 webview，双线程，预加载等。&lt;/p&gt;

&lt;h4 id=&quot;bigintjavascript-中的任意精度整数&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36385254&quot;&gt;BigInt：JavaScript 中的任意精度整数&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;BigInts 是 JavaScript 中的一个新的数字基本类型，可以用任意精度表示整数。文章介绍了 BigInts 的产生原因，使用场景，用法以及相关规范等。&lt;/p&gt;

&lt;h4 id=&quot;快速定位线上-nodejs-内存泄漏问题&quot;&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/587187&quot;&gt;快速定位线上 Node.js 内存泄漏问题&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;想要分析定位内存泄漏问题，首先我们要去获取 Node.js 进程在发生泄漏时的堆上各个对象和它们间的引用关系，这个保存了堆上各个对象以及其引用关系的文件就是堆快照。本文主要是介绍如何获取堆快照，以及对堆快照内容的分析， 从而定位内存泄漏。&lt;/p&gt;

&lt;h4 id=&quot;nerv实战---京东首页改版小结&quot;&gt;&lt;a href=&quot;https://aotu.io/notes/2018/04/24/jdindex_2017/&quot;&gt;Nerv实战 - 京东首页改版小结&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这篇文章对京东首页改造的开发过程做了 简单的介绍， 从技术选型到 整体开发架构与模式，以及后续的&lt;br /&gt;
性能、体验优化等方面都有探索。&lt;/p&gt;

&lt;h4 id=&quot;angular-6正式发布新功能详解&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;amp;mid=2247488834&amp;amp;idx=1&amp;amp;sn=7032a6aee78a15f04207726a271133f1&amp;amp;chksm=f951a001ce262917d9dc8e96cc7b50ae355956737d6c0e3285d5d32b4891b3345c65190ffa9b&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0504uY1vxm2Dqgi7jNRVNeeR&amp;amp;rd2werd=1#wechat_&quot;&gt;Angular 6正式发布，新功能详解&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这次更新还包括框架包（@angular/core、@angular/common、@angular/compiler等）、Angular CLI、Angular Material + CDK，这主要是为了解决兼容问题，这些项目的补丁版本将根据项目需求发布。&lt;/p&gt;

&lt;h4 id=&quot;is-serviceworker-ready-yes-&quot;&gt;&lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is ServiceWorker Ready? (Yes.) &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Edge称为最后一个支持Service Workers的主流浏览器，本页提供了一个浏览器支持的综述。&lt;/p&gt;

&lt;h4 id=&quot;漫画深入浅出-es-模块&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36358695&quot;&gt;漫画：深入浅出 ES 模块&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ES 模块为 JavaScript 提供了官方标准化的模块系统。这中间经历了近 10 年时间的来做标准化工作。文章介绍ES 模块能解决什么问题，以及它们与其他模块系统中的模块有什么不同。&lt;/p&gt;

&lt;h4 id=&quot;我当初为什么写webpack&quot;&gt;&lt;a href=&quot;https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxcheckurl?requrl=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMjM5MTA1MjAxMQ%3D%3D%26mid%3D2651228535%26idx%3D1%26sn%3D06d7aba782e719c2db719f749d13962a%26chksm%3Dbd4950f38a3ed9e5366fbf1944ffa4e70d68ef3e1654ae85537fd123f4c6a6f38f22097dbcac%26mpshare%3D1%26scene%3D1%26srcid%3D0505sBC620GDrE51wn7zwREk%23rd&amp;amp;skey=%40crypt_5daf84db_a7e1b33fd67f765b19f8d2f549fbe058&amp;amp;deviceid=e553547798169464&amp;amp;pass_ticket=undefined&amp;amp;opcode=2&amp;amp;scene=1&amp;amp;username=@fa5d9c092c76b9b064ed181b8dfd6163df513c71c81881c75530dd64e6b15271&quot;&gt;我当初为什么写webpack&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;许多 JavaScript 的开发者都知道 ES 模块一直存在着一些争议，但是很少有人真正地知道 ES 模块的原理。&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;如何在疲劳的js世界中持续学习&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5ae97bd05188256719521ae0&quot;&gt;如何在疲劳的JS世界中持续学习&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Tobias Koppers是一位自由软件开发者，家住德国纽伦堡。他因写出webpack这个已有数百万开发者使用的开源软件而名噪一时。他目前专注于JavaScript和开源项目。以下是对他个人的专访，希望对大家有所启发。&lt;/p&gt;

&lt;h4 id=&quot;重构---改善代码的各方面问题&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5adc8e18518825672b0352a8&quot;&gt;重构 - 改善代码的各方面问题&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;重构不是对以前代码的全盘否定，而是利用更好的方式，写出更好，更有维护性代码。不断的追求与学习，才有更多的进步。&lt;/p&gt;
</description>
        <pubDate>Mon, 07 May 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/05/07/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/05/07/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.04.30期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;超大型-javascript-应用的设计哲学&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35929167&quot;&gt;超大型 JavaScript 应用的设计哲学&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文主要讨论了如何构建高度复杂的 web 应用，以及如何保证应用在整个生命周期的轻量运行。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;the-nodejs-project-introduces-latest-release-line-nodejs-10x&quot;&gt;&lt;a href=&quot;https://medium.com/the-node-js-collection/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076&quot;&gt;The Node.js Project Introduces Latest Release Line: Node.js 10.x&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Node.js 发布最新版本 Node.js 10.0.0，同时，npm 6 也随之发布，并计划在今年 10 月，Node.js 10.x 将成为长期支持版本。Node.js Foundation 对 Node 10 的新增内容进行了介绍，包含 N-API，升级到 OpenSSL 1.1.0，错误处理改进，性能改进，以及新的 JavaScript 语言特性。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;react源码分析全面剖析组件更新机制&quot;&gt;&lt;a href=&quot;http://realtcg.com/2018/04/17/react-source-code-analysis-3-update/&quot;&gt;React源码分析：全面剖析组件更新机制&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章是作者对 React(15-stable版本)源代码的解读， 剖析了组件更新机制，很好的了解了 setState 执行前后 Reac t做了哪些事情和流程。&lt;/p&gt;

&lt;h4 id=&quot;css-at-scale-linkedins-new-open-source-projects-take-on-stylesheet-performance&quot;&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/04/css-at-scale--linkedins-new-open-source-projects-take-on-stylesh&quot;&gt;CSS at Scale: LinkedIn’s New Open Source Projects Take on Stylesheet Performance&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;LinkedIn 在组件 CSS 限定作用域及优化的开源项目(&lt;a href=&quot;https://github.com/linkedin/css-blocks&quot;&gt;css-blocks&lt;/a&gt;,&lt;a href=&quot;https://github.com/linkedin/opticss&quot;&gt;opticss&lt;/a&gt;)实践，目前项目 API 尚不稳定且可能后期版本不向后兼容，不建议在生产上使用。&lt;/p&gt;

&lt;h4 id=&quot;javascript-是如何工作的渲染引擎以及优化建议&quot;&gt;&lt;a href=&quot;https://github.com/neal1991/articles-translator/blob/master/JavaScript%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9A%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.md&quot;&gt;JavaScript 是如何工作的：渲染引擎以及优化建议&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是 JavaScript 是如何工作的系列第 11 篇，介绍浏览器渲染原理，了解是如何处理 HTML 和 CSS 的解析和可视化，并能针对性进行代码优化。&lt;/p&gt;

&lt;h4 id=&quot;react-v163-版本新生命周期函数浅析及升级方案&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36062486&quot;&gt;React v16.3 版本新生命周期函数浅析及升级方案&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;React v16.3 版本新引入两个生命周期函数，并将在未来 v17.0 移除三个生命周期函数 componentWillMount，componentWillReceiveProps，componentWillUpdate，这篇文章探究背后的原因以及在具体项目中的升级方案。&lt;/p&gt;

&lt;h4 id=&quot;解密-vue-ssr&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35871344&quot;&gt;解密 Vue SSR&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从 Vue SSR 的构建流程、运行流程、SSR的特点和利弊这几方面对 Vue SSR 有一个较为详细的介绍，最后还将附上一个笔者实现的去除 Vue 全家桶的 Demo 案例。&lt;/p&gt;

&lt;h4 id=&quot;如何提升页面渲染效率&quot;&gt;&lt;a href=&quot;http://icodeit.org/2017/02/frontend-page-performance-tuning/&quot;&gt;如何提升页面渲染效率&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍了页面是如何被渲染的， 同时提出了一些影响到页面渲染的地方，以及如何避免这些问题，来提升页面的渲染效率。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;专访死马为什么说-eggjs-是企业级-node-框架&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36240171&quot;&gt;专访死马：为什么说 Egg.js 是企业级 Node 框架&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对 Egg.js的主要开发者不四的一个专访，关于诞生的过程，使用场景，以及在做企业级 web 框架遇到的一些问题等。&lt;/p&gt;

&lt;h4 id=&quot;重构---改善代码的各方面问题&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5adc8e18518825672b0352a8&quot;&gt;重构 - 改善代码的各方面问题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;重构不是对以前代码的全盘否定，而是利用更好的方式，写出更好，更有维护性代码。本文分享了对重构的理解，以及一些如何重构的例子。&lt;/p&gt;

&lt;h4 id=&quot;dive-into-code-vscode-源码阅读一&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35902370&quot;&gt;Dive Into Code: VSCode 源码阅读（一）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;介绍了在 VSCode 源码阅读之前的需要的一些准备工作，主要是 Electron 应用的结构、依赖注入设计模式、和 VSCode 源代码和大体组织情况。&lt;/p&gt;

&lt;h4 id=&quot;漫画算法最小栈的实现&quot;&gt;&lt;a href=&quot;http://blog.jobbole.com/106940/&quot;&gt;漫画算法：最小栈的实现&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;跟随 ‘小灰灰’ 的脚步学习下算法最小栈的实现。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/36274888&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 Apr 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/04/30/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/04/30/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.04.23期)</title>
        <description>&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;用代码生成glitch-art风格的抖音字体&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/W6BFziTEYD06_0a2Ao6RVw&quot;&gt;用代码生成Glitch Art风格的抖音字体&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;故障艺术（GlitchArt）作为一种艺术形式，产生于我们生活中一些十分常见的场景，例如数字设备发生故障的场景，当电视、电脑等设备的软件或硬件出现问题后，可能会造成视频音频播放异常，在视觉上，画面变成破碎、带有缺陷的图像，颜色失真。本文主要是从艺术手法和 JS 前端实现 2 个方面进行梳理，我们可以看到如何用代码来描述艺术手法，达到自动化生成某一风格作品的目的。&lt;/p&gt;

&lt;h4 id=&quot;vuepress-a-vue-powered-static-site-generator&quot;&gt;&lt;a href=&quot;https://vuepress.vuejs.org/&quot;&gt;VuePress: A Vue-Powered Static Site Generator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;基于Vue的静态网站生成器，享受在用Markdown中使用Vue！&lt;/p&gt;

&lt;h4 id=&quot;关于purecomponent对性能影响的一些探究&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34804173&quot;&gt;关于PureComponent对性能影响的一些探究&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;React PureComponent组件并不是使用了就能提高性能，那么在什么情况下才能开始发挥性能优势？&lt;/p&gt;

&lt;h4 id=&quot;驳我不是很懂-nodejs-社区的-dry-文化&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35864087&quot;&gt;驳《我不是很懂 Node.js 社区的 DRY 文化》&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;关于nodejs社区的dry文化的讨论。&lt;/p&gt;

&lt;h4 id=&quot;使用localstorage代替cookie实现跨域共享数据&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35738376&quot;&gt;使用localstorage代替cookie实现跨域共享数据&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在共享cookie的场景，通常做法是使用登录中心分发cookie状态再进行同步进行解决，这里提供另一种思路，使用 localStorage + postMessage来实现数据跨域共享。&lt;/p&gt;

&lt;h4 id=&quot;webpack基本架构浅析&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;amp;mid=2651228430&amp;amp;idx=1&amp;amp;sn=eb1a928d5b850fb4686b3c07be10b7b4&amp;amp;chksm=bd49508a8a3ed99c33e1dae173aeb4e6db9b386b73258ae2583ebea8160a5791480cc2b88ab3&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0421obQTO8RZAUCEfqEJh3Le#rd&quot;&gt;Webpack基本架构浅析&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;授之以鱼，不如授之以渔。
突破这个瓶颈的关键就是学会深入理解优秀开源库背后的思路。有人可能会说，我用xxx已经很久了，能够熟练使用它解决各种棘手问题，对于它，我已经充分理解了。我想说的是，即便你对于它的使用已经达到了炉火纯青的程度，但是站在使用者角度理解再“深”能有多深呢，不过是坐井观天罢了。&lt;/p&gt;

&lt;h4 id=&quot;nodejs中被忽略的内存&quot;&gt;&lt;a href=&quot;http://huang-jerryc.com/2016/04/14/NodeJS%E4%B8%AD%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E5%86%85%E5%AD%98/&quot;&gt;NodeJS中被忽略的内存&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;当一个应用访问量、并发量达到一个量级后， 性能上的瓶颈就会出现，内存问题也将备受关注， 尤其Node对内存泄露十分敏感， 为了解决这种问题， 我们需要先了解下V8中的内存处理机制。&lt;/p&gt;

&lt;h4 id=&quot;使用javascript中undefined小技巧&quot;&gt;&lt;a href=&quot;https://www.w3cplus.com/javascript/7-tips-to-handle-undefined-in-javascript.html&quot;&gt;使用JavaScript中undefined小技巧&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章详细的阐述了undefined在JavaScript是怎样的姿态存在，和一些允许的用法，以及如何更好的使用它。&lt;/p&gt;

&lt;h4 id=&quot;what-you-can-expect-from-nodejs-10&quot;&gt;&lt;a href=&quot;https://nodesource.com/blog/what-you-can-expect-from-node-js-10/&quot;&gt;What You Can Expect From Node.js 10&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The release of Node.js v10 is just a week away, and will include a suite of new features including updates to errors and the formal addition of N-API.&lt;/p&gt;

&lt;h4 id=&quot;javascript-top-10-open-source-of-the-month-vapr-2018&quot;&gt;&lt;a href=&quot;https://medium.mybridge.co/javascript-top-10-open-source-of-the-month-v-apr-2018-22a06b763fd0&quot;&gt;JavaScript Top 10 Open Source of the Month (v.Apr 2018)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Open source projects can be useful for programmers. Hope you find an interesting project that inspires you.&lt;/p&gt;

&lt;h4 id=&quot;the-2018-web-developer-roadmap&quot;&gt;&lt;a href=&quot;https://codeburst.io/the-2018-web-developer-roadmap-826b1b806e8d&quot;&gt;The 2018 Web Developer Roadmap&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Want to learn to code? There is no better time to start than right now. Below is an illustrated roadmap focussed on how to become a developer in 2018.&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;vs-codeatom这些开源文本编辑器的代码实现中有哪些奇技淫巧&quot;&gt;&lt;a href=&quot;https://www.zhihu.com/question/272156541/answer/367784539&quot;&gt;VS Code、ATOM这些开源文本编辑器的代码实现中有哪些奇技淫巧？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章@justjavac对vscode和atom的性能作了一些研究，记录了文本编辑器在代码实现中的一些奇技淫巧。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;前端人工智能tensorflowjs-学会游戏通关&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35451395&quot;&gt;前端人工智能？TensorFlow.js 学会游戏通关&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;使用TensorFlow开发AI，来玩隐藏在Chrome中的彩蛋游戏T-Rex Runner。&lt;/p&gt;

&lt;h4 id=&quot;最考验换位思考的一道算法题&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5ad8f6cdf265da0b9d77c0e3&quot;&gt;最考验换位思考的一道算法题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;有两个大于1的整数 x 和 y，甲知道二者的积，乙知道二者的和。
甲：我不知道这俩数是什么！
乙：我不知道这俩数是什么，我就知道你不知道！
甲：现在我知道了。
乙：我也知道了。
请问这两个数是几？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 23 Apr 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/04/23/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/04/23/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.04.16期)</title>
        <description>&lt;h2 id=&quot;团队分享&quot;&gt;团队分享&lt;/h2&gt;

&lt;h4 id=&quot;魔幻语言-javascript-系列之类型转换宽松相等以及原始值&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35566906&quot;&gt;魔幻语言 JavaScript 系列之类型转换、宽松相等以及原始值&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;从两个题目来介绍类型转换、宽松相等以及原始值的概念: [1] + [2] – [3] === 9，以及如何让 a == true &amp;amp;&amp;amp; a == false 的值为 true，很是体现 JavaScript 的魔幻之处。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;如何评价阿里开源的企业级-nodejs-框架-eggjs&quot;&gt;&lt;a href=&quot;https://www.zhihu.com/question/50526101&quot;&gt;如何评价阿里开源的企业级 Node.js 框架 EggJS？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;“egg最核心的东西，其实就是一套约定和规范，这个规范不仅仅是开发目录的约定，还包括了开发过程中，从提案讨论，编码风格，code review等等方面的规范。&lt;/p&gt;

&lt;p&gt;其实大家的基础框架用不用egg真的无所谓，最重要是有一套适合团队的约定。”&lt;/p&gt;

&lt;h4 id=&quot;从命令式-javascript-class-到声明函数式的华丽转身&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35503164&quot;&gt;从命令式 JavaScript class 到声明函数式的华丽转身&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;通过 8 个步骤，将 EventEmitter 的实现从面相对象的 class 风格转变为声明式函数式风格。&lt;/p&gt;

&lt;h4 id=&quot;从零开始写一个-promise-库&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35697919&quot;&gt;从零开始写一个 Promise 库&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍了从零开始实现一个简单的 promise 库，以及如何跟 async/await 结合使用。&lt;/p&gt;

&lt;h4 id=&quot;how-to-escape-asyncawait-hell&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c&quot;&gt;How to escape async/await hell&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;async/await freed us from callback hell, but people have started abusing it — leading to the birth of async/await hell.&lt;/p&gt;

&lt;p&gt;In this article, I will try to explain what async/await hell is, and I’ll also share some tips to escape it.&lt;/p&gt;

&lt;h4 id=&quot;闭包是真的美&quot;&gt;&lt;a href=&quot;https://github.com/prettyEcho/deep-js/issues/4&quot;&gt;闭包，是真的美&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;闭包， 对于前端开发人员来说一定很熟悉， 但能完全它讲清楚，还是有不少人难以解释全的，可以像本文作者一样尝试着总结一下加深理解。&lt;/p&gt;

&lt;h4 id=&quot;javascript-装饰器极速指南&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/xuanhun/p/8735524.html&quot;&gt;Javascript 装饰器极速指南&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文会对Decorators做详细的讲解，相信你会体验到它给编程带来便利和优雅。&lt;/p&gt;

&lt;h4 id=&quot;lazy-loading-images-and-video&quot;&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/?utm_source=CSS-Weekly&amp;amp;utm_campaign=Issue-310&amp;amp;utm_medium=web&quot;&gt;Lazy Loading Images and Video&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;多媒体资源的Lazy Loading是对页面的降低初始页面负载和加载时间的解决方案，对于图片的解决方案能经常看到，而对视频，还需要注意几个属性的设置。&lt;/p&gt;

&lt;h4 id=&quot;mvvm-前端数据流框架精讲&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;amp;mid=2697266952&amp;amp;idx=2&amp;amp;sn=a3389d1db237c2b23f523061da3b2359&quot;&gt;MVVM 前端数据流框架精讲&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;MVVM 是指双向数据流，即 View-Model 之间的双向通信，由 ViewModel 作桥接。本文将带大家了解什么是 mvvm，mvvm 的原理，以及近几年产生了哪些演变。&lt;/p&gt;

&lt;h4 id=&quot;深入研究css字体度量及css-盒子&quot;&gt;&lt;a href=&quot;https://hiyangguo.github.io/2018/04/09/in-depth-study-font-size-line-height-and-vertical-align/&quot;&gt;深入研究CSS字体度量及CSS 盒子&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这篇文章主要研究：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;font 的工作原理及度量参数&lt;/li&gt;
  &lt;li&gt;CSS box models 的类型、定义&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;能让你开发效率翻倍的-vscode-插件配置&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35661521&quot;&gt;能让你开发效率翻倍的 VSCode 插件配置&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这篇文章是《能让你开发效率翻倍的 VSCode 插件配置（上）》的续篇，包括 VSCode 外观增强、功能增强、编码效率等方面的 10 个插件，其中有部分插件也是我发布上篇文章之后在评论里学到的（这可能是写技术文章的最大好处了，哈哈），试用之后觉得不错，现在也列出来（同时也感谢愿意评论交流的同学），希望对读到这篇文章的同学有所帮助。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;为什么-kubernetes-天然适合微服务&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35642088&quot;&gt;为什么 kubernetes 天然适合微服务&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文从应用架构、数据架构、IT架构来阐述K8S作为微服务的种种优势。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;why-you-should-start-a-side-project&quot;&gt;&lt;a href=&quot;https://medium.com/ideas-at-igenius/why-you-should-start-a-side-project-and-how-8e63a33187e5&quot;&gt;Why you should start a side project &lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为什么应该自己去玩一些边缘项目，并从中获益，理由有很多，比如可以尝试新技术，成为社区的一部分，与社区互动，以及从零开始打造一个项目。&lt;/p&gt;

&lt;h4 id=&quot;how-to-think-like-a-programmerlessons-in-problem-solving&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2&quot;&gt;How to think like a programmer — lessons in problem solving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Problem-solving is an incredible skill to cultivate (the meta-skill). Thinking like a programmer is an effective way to train your ability to solve problems.&lt;/p&gt;

&lt;h4 id=&quot;工程师如何在工作中提升自己&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35608666&quot;&gt;工程师如何在工作中提升自己&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;像标题一样，本文主要是笔者作为工程师的一些经验，去思考和汇总学习方法论，绘制出优秀架架构师能力模型 的观点， 如何在工作中提升自己， 做到“一边工作， 一边学习”的分享。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 前端老兵&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 16 Apr 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/04/16/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/04/16/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.04.09期)</title>
        <description>&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;
&lt;h4 id=&quot;announcing-the-second-edition-of-refactoring&quot;&gt;&lt;a href=&quot;https://martinfowler.com/articles/201803-refactoring-2nd-ed.html&quot;&gt;Announcing the Second Edition of “Refactoring”&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Martin Fowler 宣布《重构》第二版的写作语言将从 Java 切换到 JavaScript，由于 ECMAScript 越来越完善，以及函数式编程的特性，使得其很容易重构。&lt;/p&gt;

&lt;h4 id=&quot;introducing-the-payment-request-api-for-apple-pay&quot;&gt;&lt;a href=&quot;https://webkit.org/blog/8182/introducing-the-payment-request-api-for-apple-pay/?from=timeline&amp;amp;isappinstalled=0&quot;&gt;Introducing the Payment Request API for Apple Pay&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;iOS 11.3 Safari支持Apple Pay了。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;node全栈为前端带来更多可能&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;amp;mid=2247488622&amp;amp;idx=1&amp;amp;sn=ace22c286a261645e2c07a7adf90abf9&amp;amp;chksm=f951a12dce26283ba54599d8da75c4a56a137bf7a900e847ccea1b5452ab0ef85f31efd781f5&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0404j2FNOyYVrqfPOy18CO4u#rd&quot;&gt;Node全栈为前端带来更多可能&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;坚定不移地走Node.js全栈之路。&lt;/p&gt;

&lt;h4 id=&quot;2018-前端性能检查表&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5ac1d117f265da2396128b9f&quot;&gt;2018 前端性能检查表&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;性能不仅仅是一个技术问题：它很重要，而且当把它引入到工作流时，设计决策必须根据其性能影响来决定。我们必须不断的测量、监视和改进性能，而且 Web 日益复杂的情况带来了新的挑战，使得性能指标难以被跟踪，因为性能指标将因设备、浏览器、协议、网络类型和延迟（CDN、运营商、缓存、代理、防火墙、负载平衡器和服务器都在其中发挥作用）而有很大差异。
因此，如果我们创作一个在提高性能时必须牢记的所有事项的概述——从流程的一开始到网站的最终发布——这样的列表将是什么样子？下面就是 2018 前端性能检查表（但愿不偏不倚和足够客观）——说明您可能需要考虑的问题，以确保您的站点响应时间快、用户交互流畅，并且不会用尽用户的带宽。&lt;/p&gt;

&lt;h4 id=&quot;抱歉学会-proxy-真的可以为所欲为&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35080324&quot;&gt;抱歉，学会 Proxy 真的可以为所欲为&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Proxy 是 JavaScript 2015 的一个新特性，有很多意想不到操作手法。文中就给我们展示它的一些用法， 尽管在低版本浏览器中无法 polyfill， 但在Node.js 还是有不少用武之地的。&lt;/p&gt;

&lt;h4 id=&quot;javascript中的多继承&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34693209&quot;&gt;JavaScript中的“多继承”&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章 简述了“类”与“继承”在 JavaScript 中演变，讨论了“多继承”在实现时需要考虑的问题，并尝试在 JavaScript 中模拟“多继承”，显然这种”多继承“方式是不建议使用的。 文中提到 “JavaScript 本身就不是面向对象的语言” 的观点 我是不太赞成的，既然JavaScript 具备面向对象语言的三大特征，应该是一种面向对象的语言， 只不过其实现过程不那么显而易见，不过阅读本文会对 JavaScript 的 原型链会有更深入的理解。&lt;/p&gt;

&lt;h4 id=&quot;keep-pixelated-images-pixelated-as-they-scale&quot;&gt;&lt;a href=&quot;https://css-tricks.com/keep-pixelated-images-pixelated-as-they-scale/#more-269520&quot;&gt;Keep Pixelated Images Pixelated as They Scale&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个CSS属性&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering&quot;&gt;image-rendering&lt;/a&gt;，让图片在放大时候仍保持高清&lt;/p&gt;

&lt;h4 id=&quot;how-javascript-works-memory-management--how-to-handle-4-common-memory-leaks&quot;&gt;&lt;a href=&quot;https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec&quot;&gt;How JavaScript works: memory management + how to handle 4 common memory leaks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Even when working with high-level languages, developers should have an understanding of memory management (or at least the basics).&lt;/p&gt;

&lt;h2 id=&quot;实用推荐&quot;&gt;实用推荐&lt;/h2&gt;

&lt;h4 id=&quot;cool-chrome-devtools-tips-and-tricks-you-wish-you-knew-already&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/cool-chrome-devtools-tips-and-tricks-you-wish-you-knew-already-f54f65df88d2&quot;&gt;Cool Chrome DevTools tips and tricks you wish you knew already&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;几个你不可不知的超级酷炫的 Chrome DevTools 使用技巧：在发送 ajax 请求时触发断点、在控制台输入多行命令、给指定元素截图&lt;/p&gt;

&lt;h4 id=&quot;rainbow-vortex&quot;&gt;&lt;a href=&quot;https://www.svgbackgrounds.com/#rainbow-vortex&quot;&gt;rainbow-vortex&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为博客设计、赏心悦目的svg背景图&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;老码农冒死揭开行业黑幕如何编写无法维护的代码&quot;&gt;&lt;a href=&quot;http://blog.jobbole.com/80241/&quot;&gt;老码农冒死揭开行业黑幕：如何编写无法维护的代码&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;永远不要（把自己遇到的问题）归因于（他人的）恶意，这恰恰说明了（你自己的）无能。&lt;/p&gt;

&lt;h4 id=&quot;金丝雀发布滚动发布蓝绿发布到底有什么差别关键点是什么&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WdCM6cOmjdhAEa6PtviH9A&quot;&gt;金丝雀发布、滚动发布、蓝绿发布到底有什么差别？关键点是什么&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文试图总结当前主流的发布策略，以及他们的优劣，适用性，让开发人员能对现代发布技术有一个更为清晰全面的认识，让大家能够根据自身环境，对发布策略做出正确的选型和实践。&lt;/p&gt;

&lt;h4 id=&quot;可视化了解一下-echarts-40最全技术攻略&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651006663&amp;amp;idx=4&amp;amp;sn=1833bf61617c12aa5f4880508b25a9f9&amp;amp;chksm=bdbede948ac95782ff28cba0c35dd973a8a3b4094b4bd5113cfcf3b6838382e865dea2a9a092&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0408sz6o6RYNUMdtftmDyJgb#rd&quot;&gt;可视化了解一下？ ECharts 4.0最全技术攻略&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;3月 31日，由百度开发者中心主办、极客邦科技承办、百度创新中心赞助的第 77期百度技术沙龙，从 ECharts 的产品特性、技术实现、可视化实践、开源社区建设等四个维度出发，全面介绍如何更好运用 ECharts 来让用户洞察数据，为听众带来一场深入了解 ECharts的分享盛宴。&lt;/p&gt;

&lt;h4 id=&quot;交互技能树--交互设计师的视觉思维&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35190020&quot;&gt;交互技能树 | 交互设计师的视觉思维&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个好的设计，要兼顾可视性和易通性。所谓可视性，就是让用户知道这个产品怎么用，怎么操作才是合理的。所谓易通性，就是要让用户明白你的设计意图，明确地告诉用户，你设计的这个东西是干什么用的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/35444082&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 09 Apr 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/04/09/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/04/09/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.04.02期)</title>
        <description>&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;30-行代码实现-redux-callbag-副作用隔离&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35077007&quot;&gt;30 行代码实现 Redux Callbag 副作用隔离&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;callbag 是一系列响应式编程规范，这篇文章介绍了结合 redux 和 callbag 来处理异步操作副作用。&lt;/p&gt;

&lt;h4 id=&quot;check-out-these-useful-ecmascript-2015-es6-tips-and-tricks&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/check-out-these-useful-ecmascript-2015-es6-tips-and-tricks-6db105590377&quot;&gt;Check out these useful ECMAScript 2015 (ES6) tips and tricks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;EcmaScript 2015 (aka ES6) has been around for couple of years now, and various new features can be used in clever ways. I wanted to list and discuss some of them, since I think you’ll find them useful.&lt;/p&gt;

&lt;h4 id=&quot;从头实现一个koa框架&quot;&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014044408&quot;&gt;从头实现一个koa框架&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章记录了笔者从头开发一个koa框架的过程， 从中也展现了koa最重要的几个概念和原理，相信大家在看完本文之后，会对koa有一个更深入的理解。&lt;/p&gt;

&lt;h4 id=&quot;nodejs-如何高效的获取时间戳而不影响性能的&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34889978&quot;&gt;Nodejs 如何高效的获取时间戳而不影响性能的？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;笔者探究了一下 在HTTP RFC明确要求response Header定义Date字段时，Nodejs 如何高效的获取时间戳而不影响性能的问题？  文中涉及到nodejs timer模块的设计和原理， 阅读后可以对 timer模块有个深入的理解。&lt;/p&gt;

&lt;h4 id=&quot;es2018-新特征之正则表达式反向lookbehind断言&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/yjM8zWY0WjI9iYjskRXo2Q&quot;&gt;ES2018 新特征之：正则表达式反向(lookbehind)断言&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;正则表达式反向(lookbehind)断言，正则表达式又将多一种匹配方式， 先了解下它的用法。&lt;/p&gt;

&lt;h4 id=&quot;译-开始使用新的-css-typed-object-model&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35029796&quot;&gt;[译] 开始使用新的 CSS Typed Object Model&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CSS 拥有一个适当的基于对象的 API 来处理 JavaScript 中的值&lt;/p&gt;

&lt;h4 id=&quot;es-modules-a-cartoon-deep-dive&quot;&gt;&lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;ES Modules 为 JavaScript 提供了一个官方标准化的模块系统，并且已经逐渐在主流浏览器得到支持。文章通过漫画的方式介绍 ES Modules 解决的问题，以及工作方式等。&lt;/p&gt;

&lt;h4 id=&quot;源码笔记nodejs-如何高效的获取时间戳而不影响性能的&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34889978&quot;&gt;源码笔记：Nodejs 如何高效的获取时间戳而不影响性能的？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;HTTP RFC中，明确要求response Header定义Date字段，Nodejs 如何高效的获取时间戳而不影响性能的？
这个问题涉及到了 nodejs timer 模块的设计和原理、timer 模块的优化、timer 模块的发展历程。&lt;/p&gt;

&lt;h4 id=&quot;秀几种css背景渐变图片transtion过渡效果技巧&quot;&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2018/03/background-gradient-transtion/&quot;&gt;秀几种CSS背景渐变图片transtion过渡效果技巧&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;background-image 不支持 CSS3 transition，当 CSS3 gradient 渐变作为背景图片存在的时候，直接设置 transition 是不会有过渡效果的，那该怎么办呢？&lt;/p&gt;

&lt;h4 id=&quot;h5主流浏览器下app导流方案选取&quot;&gt;&lt;a href=&quot;http://awhisper.github.io/2018/03/24/wap-app-growth/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;H5主流浏览器下App导流方案选取&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;针对H5主流浏览器进行渠道区分，定制差异化的导流方案&lt;/p&gt;

&lt;h4 id=&quot;modern-frontend-developer-in-2018&quot;&gt;&lt;a href=&quot;https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c&quot;&gt;Modern Frontend Developer in 2018&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;2018 年前端开发指南，从零开始，涵盖各方各面。&lt;/p&gt;

&lt;h4 id=&quot;2018-年了你还是只会-npm-install-吗&quot;&gt;&lt;a href=&quot;http://myan.im/2018/03/24/you-dont-know-npm/&quot;&gt;2018 年了，你还是只会 npm install 吗？&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;nodejs 社区乃至 Web 前端工程化领域发展到今天，作为 node 自带的包管理工具的 npm 已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个nodejs基础设施的使用和了解还停留在: 会用 npm install 这里（一言不合就删除整个 node_modules 目录然后重新 install 这种事你没做过吗？）&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;rust-和-erlang-的对比&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/rust-erlang-comparison&quot;&gt;Rust 和 Erlang 的对比&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Erlang 和 Rust 在各自的领域都很强大，Erlang 已经算是一门比较古老的语言，可扩展性、并发性、分布和容错方面已经证明很强大。而 Rust 具有自己定义的特性，尽管不能被视为Erlang的替代品，但在同一个项目中混合两种语言来利用它们的能力是可行的做法。&lt;/p&gt;

&lt;h4 id=&quot;在阿里我们如何管理代码分支&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651006565&amp;amp;idx=1&amp;amp;sn=9a1e9bc53def6eeb9637d79719628d3b&amp;amp;chksm=bdbede368ac95720cec02ced13525c75c335b49b3e9a96c0f3233194734b4ff8b5b88e36933e&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0330HaORmvYMJMQ6kGp3VbJV#rd&quot;&gt;在阿里，我们如何管理代码分支？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;代码分支模式的选择并没有绝对的正确和错误之分，关键是与项目的规模和发布节奏相匹配。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;api崛起移动互联网时代企业战略的转变&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5abde6a26fb9a028e0149459&quot;&gt;API崛起，移动互联网时代企业战略的转变&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在未来，所有的功能、数据和服务都应该以API的形式提供出来。基于各种API，我们可以构建很多系统和产品。比如各种类型的APP、微信公众号、H5的网站，以及Robot和很多物联网的产品。这些产品的构建都是依赖API来构建的，API崛起之后对很多行业都会产生重大的影响。&lt;/p&gt;

&lt;h4 id=&quot;良好的编码习惯--5-个提高代码质量的技巧&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5abc584251882555867f7f1e&quot;&gt;良好的编码习惯 —— 5 个提高代码质量的技巧&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;良好的编码习惯像黑夜中的一盏明灯，指引着迷路的开发者安全靠岸。良好的代码是可预测的，是易于调试、扩展和测试的。
良好的编码习惯能够提高你同事的工作效率，同时让你的代码库从整体上给人一种愉快的阅读体验。
接下来我要和你们分享的是 5 个通用的良好编码习惯，它们能提高你代码的可读性，可扩展性和整体质量。越快理解和运用这些准则，你的收益就越大。&lt;/p&gt;

&lt;h4 id=&quot;左耳朵耗子从亚马逊的实践谈分布式系统的难点&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651006546&amp;amp;idx=1&amp;amp;sn=7a2698ec913d5e6431249a0258f80ce5&amp;amp;chksm=bdbede018ac957171608402b1c35d50a74b573caa338592b77db24d20345644757db44507f44&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0329hrkQ1a5ixTEfr9eJdl1P#rd&quot;&gt;左耳朵耗子：从亚马逊的实践，谈分布式系统的难点&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;以亚马逊为例，讲述了它是如何做分布式服务架构的，遇到了哪些问题，以及是如何解决的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/35190949&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 02 Apr 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/04/02/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/04/02/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
      <item>
        <title>ELSE 技术周刊(2018.03.26期)</title>
        <description>&lt;h2 id=&quot;本期推荐&quot;&gt;本期推荐&lt;/h2&gt;

&lt;h4 id=&quot;十倍效能提升--web-基础研发体系的建立&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34790596&quot;&gt;十倍效能提升 —— Web 基础研发体系的建立&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;文章介绍 Web 基础研发体系的构成部分，以及如何配合这套研发体系，在组织结构上做出一些调整，通过管理手段进一步挖掘团队潜力，打造更高效的组织。效能提升不仅仅是技术或管理某一方面的事情，而是要综合各个方面来寻求个人和公司发展的共赢。&lt;/p&gt;

&lt;h2 id=&quot;团队分享&quot;&gt;团队分享&lt;/h2&gt;

&lt;h4 id=&quot;amp项目实战分享&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34751588&quot;&gt;AMP项目实战分享&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;携程国际业务研发部的 AMP 项目实践经验，内容涵盖踩过的”坑”，如何优化AMP SEO页面等，满满的干货。&lt;/p&gt;

&lt;h2 id=&quot;业界动态&quot;&gt;业界动态&lt;/h2&gt;

&lt;h4 id=&quot;stack-overflow-2018-开发者调查报告出炉&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5ab5a9f96fb9a028e0146b20&quot;&gt;Stack Overflow 2018 开发者调查报告出炉&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stack Overflow 作为全球最大的程序设计领域的问答网站，每年都会出据一份开发者调查报告。近日，Stack Overflow 公布了其第八次年度开发者调查报告，这份报告基于对10万 Stack Overflow 用户的调查。&lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;这次没跳票java-10正式发布带来了这些新特性&quot;&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2018/03/Java-10-new-features&quot;&gt;这次没跳票！Java 10正式发布，带来了这些新特性&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是 Java 大版本周期变化后的第一个正式发布版本， 让我们了解一下Java 10 带来了哪些新特性。&lt;/p&gt;

&lt;h2 id=&quot;前端开发&quot;&gt;前端开发&lt;/h2&gt;

&lt;h4 id=&quot;精读-immerjs-源码&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34691516&quot;&gt;精读 Immer.js 源码&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;了解 mobx 的同学可能会发现，Immer 就是更底层的 Mobx，它将 Mobx 特性发扬光大，得以结合到任何数据流框架，使用起来非常优雅。本文作者阅读过源代码后， 从原理的角度带我们认识 Immer。&lt;/p&gt;

&lt;h4 id=&quot;不要混淆-nodejs-和浏览器中的-event-loop&quot;&gt;&lt;a href=&quot;https://cnodejs.org/topic/5a9108d78d6e16e56bb80882&quot;&gt;不要混淆 nodejs 和浏览器中的 event loop&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;event loop 是一个执行模型，在不同的地方有不同的实现， 浏览器和 nodejs 基于不同的技术实现了各自的 event loop。 本文主要对 nodejs 中的 event loop 作了简洁的讲解，相信理解了 event loop 后你对 setTimeout、setInterval、 promise、 process.nextTick 的执行顺序有进一步的了解。&lt;/p&gt;

&lt;h4 id=&quot;elegant-patterns-in-modern-javascript-ice-factory&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/elegant-patterns-in-modern-javascript-ice-factory-4161859a0eee&quot;&gt;Elegant patterns in modern JavaScript: Ice Factory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在 JavaScript 中的 class 只是一种语法糖，使用起来可能不是如你期望那般，在这里介绍一种 Ice Factory 的对象创建模式。&lt;/p&gt;

&lt;h4 id=&quot;loading-third-party-javascript&quot;&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/&quot;&gt;Loading Third-Party JavaScript&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如何正确的使用第三方库。&lt;/p&gt;

&lt;h4 id=&quot;vant-10-正式发布轻量可靠的移动端-vue-组件库&quot;&gt;&lt;a href=&quot;https://tech.youzan.com/vant-1-release/&quot;&gt;Vant 1.0 正式发布：轻量、可靠的移动端 Vue 组件库&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vant 是有赞前端团队维护的移动端 Vue 组件库，提供了一整套 UI 基础组件和业务组件。&lt;/p&gt;

&lt;h2 id=&quot;技术纵横&quot;&gt;技术纵横&lt;/h2&gt;

&lt;h4 id=&quot;教程--如何成为区块链开发者&quot;&gt;&lt;a href=&quot;https://ethfans.org/posts/blockchain-developer-crash-course&quot;&gt;教程 | 如何成为区块链开发者&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;我们现在正处于“区块链时代”，区块链对我们的未来有着巨大的影响。那么，你应该如何加入“区块链大潮”呢？如果你想成为一名区块链开发者，那么有几个小目标你必须达成。&lt;/p&gt;

&lt;h4 id=&quot;从冷战到深度学习一篇图文并茂的机器翻译史&quot;&gt;&lt;a href=&quot;https://www.jiqizhixin.com/articles/2018-03-16-5&quot;&gt;从冷战到深度学习：一篇图文并茂的机器翻译史&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一篇图文并茂的机器翻译史，从早期的基于规则的机器翻译到如今广泛应用的神经机器翻译，很多科学家都为这一梦想贡献自己的时间和心力。&lt;/p&gt;

&lt;h4 id=&quot;对标小程序--快应用开发入门指南&quot;&gt;&lt;a href=&quot;https://juejin.im/post/5ab26a1e6fb9a028b547c675&quot;&gt;对标小程序 ? “快应用”开发入门指南&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;读完之后的感觉是，node.js有了新的战场！对前端开发来说无疑是一件非常棒的事情。&lt;/p&gt;

&lt;h2 id=&quot;程序人生&quot;&gt;程序人生&lt;/h2&gt;

&lt;h4 id=&quot;阅读源码的三种境界&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PDhEKM2XG_qzOmBjWb-M7Q&quot;&gt;阅读源码的三种境界&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;作者分享他如何积累起现在的知识结构，学习过程的血和泪，职业发展的经验和教训，日常的所思所想，希望能帮助大家少走点儿弯路。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ELSE 技术周刊由 &lt;a href=&quot;https://github.com/CtripFE&quot;&gt;IFT 小组&lt;/a&gt; 出品，汇聚一周好文章， &lt;a href=&quot;https://zhuanlan.zhihu.com/p/34909353&quot;&gt;周刊原文&lt;/a&gt;。本期编辑：&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CurtisCBS&quot;&gt;@Curtis&lt;/a&gt; 前端中年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/stoneyong&quot;&gt;@StoneZou&lt;/a&gt; 前端搬砖工，不安分于前端开发的搬砖工&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/StevenX911&quot;&gt;@Steven&lt;/a&gt; 写 JS 的老年人&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/mirreal&quot;&gt;@mirreal&lt;/a&gt; 想当设计师的程序员不是一个好攻城狮&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Jade05&quot;&gt;@Jade&lt;/a&gt; 以前想多点后端sense写前端，现在想多点产品sense写前端&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/CtripFE/fe-weekly/issues&quot;&gt;点击这里&lt;/a&gt; 向我们推荐你读到的好文章。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 26 Mar 2018 18:00:00 +0800</pubDate>
        <link>http://else.vip//weekly/2018/03/26/weekly.html</link>
        <guid isPermaLink="true">http://else.vip//weekly/2018/03/26/weekly.html</guid>
        
        
        <category>weekly</category>
        
      </item>
    
  </channel>
</rss>
